"use server"

import { createClient } from "@/lib/supabaseServer"
import { revalidatePath } from "next/cache"

// Fun√ß√£o para obter o cliente Supabase do servidor
async function getSupabaseClient() {
  const client = createClient()
  console.log("üîó [DEBUG] Cliente Supabase criado:", !!client)
  return client
}

// Fun√ß√£o para verificar se o usu√°rio tem acesso pago
export async function checkPaidAccess(email: string): Promise<boolean> {
  const supabase = await getSupabaseClient()

  const { data, error } = await supabase.from("paid_users").select("status").eq("email", email).single()

  if (error) {
    console.error("Erro ao verificar acesso pago:", error)
    return false
  }

  return data?.status === "active"
}

// Fun√ß√£o para obter a role do usu√°rio
export async function getUserRole(userUuid: string): Promise<string | null> {
  const supabase = await getSupabaseClient()

  const { data, error } = await supabase.from("user_roles").select("role").eq("user_uuid", userUuid).single()

  if (error) {
    console.error("Erro ao buscar role do usu√°rio:", error)
    return null
  }

  return data?.role || null
}

// Fun√ß√£o para definir role do usu√°rio
export async function setUserRole(userUuid: string, role: "student" | "teacher") {
  const supabase = await getSupabaseClient()

  const { error } = await supabase.from("user_roles").upsert({
    user_uuid: userUuid,
    role: role,
    first_login: false,
    profile_completed: true,
  })

  if (error) {
    console.error("Erro ao definir role:", error)
    throw error
  }

  revalidatePath("/")
  return { success: true }
}

// Fun√ß√£o para criar perfil de usu√°rio
export async function createUserProfile(userUuid: string, role: "student" | "teacher", profileData: any) {
  const supabase = await getSupabaseClient()

  // Inserir ou atualizar role
  const { error: roleError } = await supabase.from("user_roles").upsert({
    user_uuid: userUuid,
    role: role,
    first_login: false,
    profile_completed: true,
  })

  if (roleError) {
    console.error("Erro ao criar role:", roleError)
    return { success: false, error: roleError.message }
  }

  // Inserir perfil espec√≠fico
  const tableName = role === "student" ? "student_profiles" : "teacher_profiles"
  const { error: profileError } = await supabase.from(tableName).upsert({
    user_uuid: userUuid,
    ...profileData,
  })

  if (profileError) {
    console.error("Erro ao criar perfil:", profileError)
    return { success: false, error: profileError.message }
  }

  revalidatePath("/")
  return { success: true }
}

// Fun√ß√£o para obter pontua√ß√£o total
export async function getTotalScore(): Promise<number> {
  const supabase = await getSupabaseClient()

  // Simula√ß√£o - em produ√ß√£o voc√™ buscaria do banco
  return 1250
}

// Fun√ß√£o para obter progresso por t√≥pico
export async function getTopicProgress() {
  const supabase = await getSupabaseClient()

  // Simula√ß√£o - retorna dados fict√≠cios para demonstra√ß√£o
  return {
    "fonetica-fonologia": { correct: 15, incorrect: 3 },
    ortografia: { correct: 22, incorrect: 5 },
    "acentuacao-grafica": { correct: 18, incorrect: 2 },
    "morfologia-classes": { correct: 12, incorrect: 8 },
    "sintaxe-termos-essenciais": { correct: 25, incorrect: 4 },
  }
}

// Fun√ß√£o para atualizar pontua√ß√£o
export async function updateScore(newScore: number) {
  const supabase = await getSupabaseClient()
  // Implementa√ß√£o da atualiza√ß√£o de pontua√ß√£o
  revalidatePath("/")
  return { success: true }
}

// Fun√ß√£o utilit√°ria para atribuir conquista
async function grantAchievement(user_uuid: string, achievement_key: string) {
  const supabase = await getSupabaseClient();
  await supabase.from("user_achievements").upsert({
    user_uuid,
    achievement_key,
  });
}

// Fun√ß√£o para atualizar progresso do t√≥pico e atribuir conquistas
export async function updateTopicProgress(topicId: string, type: "correct" | "incorrect", user_uuid: string) {
  const supabase = await getSupabaseClient();
  // Atualize o progresso normalmente (exemplo fict√≠cio)
  // ... sua l√≥gica de progresso ...

  // 1. Medalha: Primeira revis√£o de flashcard
  await grantAchievement(user_uuid, "first_flashcard");

  // 2. Medalha: 100 flashcards revisados
  // (Exemplo: conte o total de revis√µes do usu√°rio)
  const { count } = await supabase
    .from("user_flashcard_progress")
    .select("id", { count: "exact", head: true })
    .eq("user_uuid", user_uuid);
  if ((count || 0) >= 100) {
    await grantAchievement(user_uuid, "100_flashcards");
  }

  // 3. Medalha: Todos os t√≥picos de Portugu√™s completos
  // (Exemplo: verifique se todos os t√≥picos de subject_id = 1 t√™m progresso)
  const { data: ptTopics } = await supabase.from("topics").select("id").eq("subject_id", 1);
  const { data: ptProgress } = await supabase.from("user_flashcard_progress").select("topic_id").eq("user_uuid", user_uuid);
  if (ptTopics && ptProgress && ptTopics.every(t => ptProgress.some(p => p.topic_id === t.id))) {
    await grantAchievement(user_uuid, "all_topics_portugues");
  }

  // 4. Medalha: Todos os t√≥picos de Regulamentos completos
  const { data: regTopics } = await supabase.from("topics").select("id").eq("subject_id", 2);
  const { data: regProgress } = await supabase.from("user_flashcard_progress").select("topic_id").eq("user_uuid", user_uuid);
  if (regTopics && regProgress && regTopics.every(t => regProgress.some(p => p.topic_id === t.id))) {
    await grantAchievement(user_uuid, "all_topics_regulamentos");
  }

  revalidatePath("/");
  return { success: true };
}

// Fun√ß√£o para obter flashcards para revis√£o
export async function getFlashcardsForReview(topicId: string, limit = 10) {
  try {
    const supabase = await getSupabaseClient()

    console.log("üîç [DEBUG] Buscando flashcards para t√≥pico:", topicId)
    console.log("üîç [DEBUG] Limit:", limit)
    
    try {
      const { data, error } = await supabase
        .from("flashcards")
        .select("id, topic_id, question, answer")
        .eq("topic_id", topicId)
        .limit(limit)

      if (error) {
        console.error("‚ùå [DEBUG] Erro ao buscar flashcards:", error)
        console.error("‚ùå [DEBUG] Detalhes do erro:", error.message)
        throw error
      }

      if (data && data.length > 0) {
        console.log("‚úÖ [DEBUG] Flashcards encontrados no Supabase:", data.length)
        console.log("‚úÖ [DEBUG] Primeiro flashcard:", data[0])
        return data
      } else {
        console.log("‚ö†Ô∏è [DEBUG] Nenhum flashcard encontrado no Supabase, gerando dados mockados")
        throw new Error("Nenhum flashcard encontrado")
      }
    } catch (supabaseError) {
      console.log("‚ö†Ô∏è [DEBUG] Usando dados mockados como fallback")
      
      // Gerar flashcards mockados baseados no t√≥pico
      const mockFlashcards = generateMockFlashcards(topicId, limit)
      
      console.log("‚úÖ [DEBUG] Flashcards mockados gerados:", mockFlashcards.length)
      return mockFlashcards
    }
  } catch (error) {
    console.error("‚ùå [DEBUG] Erro inesperado ao buscar flashcards:", error)
    return []
  }
}

// Fun√ß√£o auxiliar para gerar flashcards mockados
function generateMockFlashcards(topicId: string, limit: number = 10) {
  // Mapear t√≥picos para conjuntos espec√≠ficos de flashcards
  const flashcardsByTopic: Record<string, Array<{id: number, topic_id: string, question: string, answer: string}>> = {
    'fonetica-fonologia': [
      { id: 1, topic_id: 'fonetica-fonologia', question: 'O que √© um fonema?', answer: 'Menor unidade sonora da fala que distingue significados.' },
      { id: 2, topic_id: 'fonetica-fonologia', question: 'O que s√£o vogais?', answer: 'Sons produzidos sem obstru√ß√£o da passagem de ar pela boca.' },
      { id: 3, topic_id: 'fonetica-fonologia', question: 'O que s√£o consoantes?', answer: 'Sons produzidos com obstru√ß√£o parcial ou total da passagem de ar.' },
      { id: 4, topic_id: 'fonetica-fonologia', question: 'O que √© um d√≠grafo?', answer: 'Conjunto de duas letras que representam um √∫nico fonema.' },
      { id: 5, topic_id: 'fonetica-fonologia', question: 'Cite exemplos de d√≠grafos consonantais.', answer: 'ch, lh, nh, rr, ss, qu, gu, sc, s√ß, xc.' }
    ],
    'ortografia': [
      { id: 3, topic_id: 'ortografia', question: "Qual a diferen√ßa entre 'mas' e 'mais'?", answer: "'Mas' √© conjun√ß√£o adversativa; 'mais' √© adv√©rbio de intensidade." },
      { id: 4, topic_id: 'ortografia', question: "Quando usar 'h√°' e quando usar 'a'?", answer: "'H√°' indica tempo passado (verbo haver); 'a' √© preposi√ß√£o ou artigo." },
      { id: 5, topic_id: 'ortografia', question: "Qual a regra para uso de 'ss' e '√ß'?", answer: "'SS' √© usado entre vogais para som de /s/; '√ß' √© usado antes de a, o, u." },
      { id: 6, topic_id: 'ortografia', question: "Quando usar 'porque', 'por que', 'porqu√™' e 'por qu√™'?", answer: "'Porque' √© conjun√ß√£o; 'por que' √© preposi√ß√£o+pronome; 'porqu√™' √© substantivo; 'por qu√™' √© usado no fim de frases." },
      { id: 7, topic_id: 'ortografia', question: "Qual a diferen√ßa entre 'sess√£o', 'se√ß√£o' e 'cess√£o'?", answer: "'Sess√£o' √© reuni√£o; 'se√ß√£o' √© divis√£o/departamento; 'cess√£o' √© ato de ceder." }
    ]
  }
  
  // Se temos flashcards espec√≠ficos para este t√≥pico, retorn√°-los
  if (flashcardsByTopic[topicId]) {
    return flashcardsByTopic[topicId].slice(0, limit)
  }
  
  // Caso contr√°rio, gerar flashcards gen√©ricos
  const mockCards = []
  for (let i = 1; i <= limit; i++) {
    mockCards.push({
      id: i,
      topic_id: topicId,
      question: `Pergunta de exemplo ${i} para o t√≥pico ${topicId}`,
      answer: `Resposta de exemplo ${i} para o t√≥pico ${topicId}`
    })
  }
  
  return mockCards
}

// Fun√ß√£o para obter todos os t√≥picos
export async function getAllTopics() {
  try {
    const supabase = await getSupabaseClient()

    console.log("üîç [DEBUG] Buscando t√≥picos...")
    const { data, error } = await supabase.from("topics").select("id, name").order("name")

    if (error) {
      console.error("‚ùå [DEBUG] Erro ao buscar t√≥picos:", error)
      return []
    }

    console.log("‚úÖ [DEBUG] T√≥picos encontrados:", data?.length || 0)
    return data || []
  } catch (error) {
    console.error("‚ùå [DEBUG] Erro inesperado ao buscar t√≥picos:", error)
    return []
  }
}

// Fun√ß√£o para obter progresso SM2 de um card
export async function getSm2ProgressForCard(flashcardId: number) {
  const supabase = await getSupabaseClient()
  // Implementa√ß√£o do SM2
  return null
}

// Fun√ß√£o para atualizar progresso SM2
export async function updateSm2Progress(flashcardId: number, progress: any) {
  const supabase = await getSupabaseClient()
  // Implementa√ß√£o do SM2
  return { success: true }
}

// Fun√ß√£o para salvar um card errado
export async function saveWrongCard(userUuid: string, flashcardId: number, topicId: string) {
  const supabase = await getSupabaseClient()

  const { error } = await supabase
    .from("wrong_cards")
    .upsert({
      user_uuid: userUuid,
      flashcard_id: flashcardId,
      topic_id: topicId,
      created_at: new Date().toISOString(),
      reviewed: false
    }, {
      onConflict: "user_uuid,flashcard_id"
    })

  if (error) {
    console.error("Erro ao salvar card errado:", error)
    return { success: false, error }
  }

  return { success: true }
}

// Fun√ß√£o para buscar cards errados do usu√°rio por t√≥pico
export async function getWrongCardsByTopic(userUuid: string, topicId: string, page = 1, limit = 20) {
  const supabase = await getSupabaseClient()

  const offset = (page - 1) * limit

  const { data, error } = await supabase
    .from("wrong_cards")
    .select(`
      flashcard_id,
      flashcards:flashcard_id (
        id,
        topic_id,
        question,
        answer
      )
    `)
    .eq("user_uuid", userUuid)
    .eq("topic_id", topicId)
    .eq("reviewed", false)
    .order("created_at", { ascending: false })
    .range(offset, offset + limit - 1)

  if (error) {
    console.error("Erro ao buscar cards errados:", error)
    return { success: false, error: error.message }
  }

  // Contar total de cards errados
  const { count, error: countError } = await supabase
    .from("wrong_cards")
    .select("*", { count: "exact", head: true })
    .eq("user_uuid", userUuid)
    .eq("topic_id", topicId)
    .eq("reviewed", false)

  if (countError) {
    console.error("Erro ao contar cards errados:", countError)
    return { success: false, error: countError.message }
  }

  // Transformar os dados para o formato esperado
  const flashcards = data?.map(item => item.flashcards).filter(Boolean) || []

  return {
    success: true,
    data: {
      flashcards,
      total: count || 0,
      page,
      limit,
      totalPages: Math.ceil((count || 0) / limit)
    }
  }
}

// Fun√ß√£o para marcar cards errados como revisados
export async function markWrongCardsAsReviewed(userUuid: string, flashcardIds: number[]) {
  const supabase = await getSupabaseClient()

  const { error } = await supabase
    .from("wrong_cards")
    .update({ reviewed: true, reviewed_at: new Date().toISOString() })
    .eq("user_uuid", userUuid)
    .in("flashcard_id", flashcardIds)

  if (error) {
    console.error("Erro ao marcar cards como revisados:", error)
    return { success: false, error }
  }

  return { success: true }
}

// Fun√ß√£o para contar cards errados por t√≥pico
export async function getWrongCardsCount(userUuid: string, topicId: string) {
  const supabase = await getSupabaseClient()

  const { count, error } = await supabase
    .from("wrong_cards")
    .select("*", { count: "exact", head: true })
    .eq("user_uuid", userUuid)
    .eq("topic_id", topicId)
    .eq("reviewed", false)

  if (error) {
    console.error("Erro ao contar cards errados:", error)
    return 0
  }

  return count || 0
}

// Fun√ß√£o para limpar todos os cards errados de um usu√°rio (opcional - para reset)
export async function clearAllWrongCards(userUuid: string) {
  const supabase = await getSupabaseClient()

  const { error } = await supabase
    .from("wrong_cards")
    .delete()
    .eq("user_uuid", userUuid)

  if (error) {
    console.error("Erro ao limpar cards errados:", error)
    return { success: false, error }
  }

  return { success: true }
}

// Fun√ß√£o para obter quizzes por t√≥pico
export async function getQuizzesByTopic(topicId: string) {
  try {
    const supabase = await getSupabaseClient()

    console.log(`üîç [DEBUG] Buscando quizzes para t√≥pico: ${topicId} (tipo: ${typeof topicId})`)

    try {
      // Tentar buscar com string primeiro
      let { data, error } = await supabase
        .from("quizzes")
        .select("id, topic_id, title, description")
        .eq("topic_id", topicId)
        .order("title")

      if (error) {
        console.error("‚ùå [ERROR] Erro ao buscar quizzes com string:", error)
        
        // Tentar com number se falhou com string
        const topicIdNum = parseInt(topicId)
        if (!isNaN(topicIdNum)) {
          console.log(`üîÑ [DEBUG] Tentando com number: ${topicIdNum}`)
          
          const { data: dataNum, error: errorNum } = await supabase
            .from("quizzes")
            .select("id, topic_id, title, description")
            .eq("topic_id", topicIdNum)
            .order("title")
            
          if (errorNum) {
            console.error("‚ùå [ERROR] Erro ao buscar quizzes com number:", errorNum)
            throw errorNum
          }
          
          if (dataNum && dataNum.length > 0) {
            console.log(`‚úÖ [DEBUG] Quizzes encontrados com number: ${dataNum.length}`)
            return dataNum
          }
        }
        
        throw error
      }

      if (data && data.length > 0) {
        console.log(`‚úÖ [DEBUG] Quizzes encontrados: ${data.length}`)
        console.log(`üìã [DEBUG] Dados dos quizzes:`, data)
        return data
      } else {
        console.log("‚ö†Ô∏è [DEBUG] Nenhum quiz encontrado no Supabase, gerando dados mockados")
        throw new Error("Nenhum quiz encontrado")
      }
    } catch (supabaseError) {
      console.log("‚ö†Ô∏è [DEBUG] Usando dados mockados como fallback")
      
      // Gerar quizzes mockados baseados no t√≥pico
      const mockQuizzes = generateMockQuizzes(topicId)
      
      console.log(`‚úÖ [DEBUG] Quizzes mockados gerados: ${mockQuizzes.length}`)
      return mockQuizzes
    }
  } catch (error) {
    console.error("‚ùå [DEBUG] Erro inesperado ao buscar quizzes:", error)
    return []
  }
}

// Fun√ß√£o auxiliar para gerar quizzes mockados
function generateMockQuizzes(topicId: string) {
  // Mapear t√≥picos para conjuntos espec√≠ficos de quizzes
  const quizzesByTopic: Record<string, Array<{id: number, topic_id: string, title: string, description: string | null}>> = {
    'fonetica-fonologia': [
      { id: 1, topic_id: 'fonetica-fonologia', title: 'Quiz B√°sico de Fon√©tica', description: 'Teste seus conhecimentos b√°sicos em fon√©tica e fonologia.' },
      { id: 2, topic_id: 'fonetica-fonologia', title: 'Quiz Avan√ßado de Fonologia', description: 'Desafie-se com quest√µes avan√ßadas sobre fonologia.' }
    ],
    'ortografia': [
      { id: 3, topic_id: 'ortografia', title: 'Quiz de Regras Ortogr√°ficas', description: 'Teste seus conhecimentos sobre as regras ortogr√°ficas da l√≠ngua portuguesa.' },
      { id: 4, topic_id: 'ortografia', title: 'Quiz de Reforma Ortogr√°fica', description: 'Quest√µes sobre as mudan√ßas trazidas pela reforma ortogr√°fica.' }
    ],
    'estatuto-militares': [
      { id: 5, topic_id: 'estatuto-militares', title: 'Quiz sobre Estatuto dos Militares', description: 'Teste seus conhecimentos sobre o Estatuto dos Militares.' },
      { id: 6, topic_id: 'estatuto-militares', title: 'Quiz sobre Direitos e Deveres', description: 'Quest√µes sobre direitos e deveres dos militares conforme o Estatuto.' }
    ]
  }
  
  // Se temos quizzes espec√≠ficos para este t√≥pico, retorn√°-los
  if (quizzesByTopic[topicId]) {
    return quizzesByTopic[topicId]
  }
  
  // Caso contr√°rio, gerar quizzes gen√©ricos
  return [
    { id: 100, topic_id: topicId, title: `Quiz B√°sico - ${topicId}`, description: `Teste seus conhecimentos b√°sicos sobre ${topicId}.` },
    { id: 101, topic_id: topicId, title: `Quiz Avan√ßado - ${topicId}`, description: `Quest√µes avan√ßadas sobre ${topicId}.` }
  ]
}

// Fun√ß√£o de debug para verificar dados na tabela
export async function debugQuizzesTable() {
  const supabase = await getSupabaseClient()

  console.log("üîç [DEBUG] Verificando tabela de quizzes...")

  // Verificar se a tabela existe e tem dados
  const { data: allQuizzes, error: allQuizzesError } = await supabase
    .from("quizzes")
    .select("*")
    .limit(10)

  if (allQuizzesError) {
    console.error("‚ùå [ERROR] Erro ao buscar todos os quizzes:", allQuizzesError)
  } else {
    console.log(`üìä [DEBUG] Total de quizzes na tabela: ${allQuizzes?.length || 0}`)
    console.log(`üìã [DEBUG] Primeiros quizzes:`, allQuizzes)
  }

  // Verificar topics tamb√©m
  const { data: allTopics, error: topicsError } = await supabase
    .from("topics")
    .select("*")
    .limit(10)

  if (topicsError) {
    console.error("‚ùå [ERROR] Erro ao buscar topics:", topicsError)
  } else {
    console.log(`üìä [DEBUG] Total de topics na tabela: ${allTopics?.length || 0}`)
    console.log(`üìã [DEBUG] Primeiros topics:`, allTopics)
  }

  return { quizzes: allQuizzes || [], topics: allTopics || [] }
}

// Fun√ß√£o de teste simples para quizzes
export async function testQuizzesConnection() {
  try {
    const supabase = await getSupabaseClient()
    console.log("üß™ [TEST] Testando conex√£o com tabela quizzes...")
    
    const { data, error, count } = await supabase
      .from("quizzes")
      .select("*", { count: "exact" })
    
    console.log("üß™ [TEST] Resultado do teste:")
    console.log("  - Error:", error)
    console.log("  - Count:", count) 
    console.log("  - Data length:", data?.length)
    console.log("  - First item:", data?.[0])
    
    return { data, error, count }
  } catch (err) {
    console.error("üß™ [TEST ERROR]:", err)
    return { data: null, error: err, count: 0 }
  }
}

// Fun√ß√£o para criar quizzes de exemplo se a tabela estiver vazia
export async function createSampleQuizzes() {
  try {
    const supabase = await getSupabaseClient()
    console.log("üå± [SEED] Verificando se precisamos criar quizzes de exemplo...")
    
    // Verificar se j√° existem quizzes
    const { data: existingQuizzes, error: checkError } = await supabase
      .from("quizzes")
      .select("id")
      .limit(1)
    
    if (checkError) {
      console.error("üå± [SEED ERROR] Erro ao verificar quizzes existentes:", checkError)
      return { success: false, error: checkError }
    }
    
    if (existingQuizzes && existingQuizzes.length > 0) {
      console.log("üå± [SEED] J√° existem quizzes, n√£o precisa criar exemplos")
      return { success: true, message: "Quizzes j√° existem" }
    }
    
    // Verificar se existem t√≥picos primeiro
    const { data: topics, error: topicsError } = await supabase
      .from("topics")
      .select("id")
      .limit(5)
    
    if (topicsError || !topics || topics.length === 0) {
      console.log("üå± [SEED] N√£o h√° t√≥picos dispon√≠veis para criar quizzes")
      return { success: false, error: "Sem t√≥picos dispon√≠veis" }
    }
    
    // Criar quizzes de exemplo
    const sampleQuizzes = [
      {
        topic_id: topics[0].id,
        title: "Quiz B√°sico de Portugu√™s",
        description: "Teste seus conhecimentos b√°sicos em portugu√™s"
      },
      {
        topic_id: topics[0].id,
        title: "Quiz Avan√ßado de Gram√°tica",
        description: "Desafie-se com quest√µes avan√ßadas de gram√°tica"
      }
    ]
    
    for (const quiz of sampleQuizzes) {
      const { error: insertError } = await supabase
        .from("quizzes")
        .insert(quiz)
      
      if (insertError) {
        console.error("üå± [SEED ERROR] Erro ao inserir quiz:", insertError)
      } else {
        console.log("üå± [SEED] Quiz criado:", quiz.title)
      }
    }
    
    return { success: true, message: "Quizzes de exemplo criados" }
  } catch (err) {
    console.error("üå± [SEED ERROR]:", err)
    return { success: false, error: err }
  }
}

// Fun√ß√£o para investigar o problema espec√≠fico dos quizzes
export async function investigateQuizIssue() {
  try {
    const supabase = await getSupabaseClient()
    console.log("üîç [INVESTIGATE] Investigando problema dos quizzes...")
    
    // 1. Verificar tabela quizzes
    const { data: allQuizzes, error: quizzesError } = await supabase
      .from("quizzes")
      .select("*")
    
    console.log("üìä [INVESTIGATE] Tabela quizzes:")
    console.log("  - Error:", quizzesError)
    console.log("  - Count:", allQuizzes?.length || 0)
    console.log("  - Data:", allQuizzes)
    
    // 2. Verificar tabela topics
    const { data: allTopics, error: topicsError } = await supabase
      .from("topics")
      .select("*")
      .limit(5)
    
    console.log("üìä [INVESTIGATE] Tabela topics:")
    console.log("  - Error:", topicsError)
    console.log("  - Count:", allTopics?.length || 0)
    console.log("  - Data:", allTopics)
    
    // 3. Verificar quiz_questions
    const { data: allQuestions, error: questionsError } = await supabase
      .from("quiz_questions")
      .select("*, quizzes(*)")
      .limit(10)
    
    console.log("üìä [INVESTIGATE] Tabela quiz_questions:")
    console.log("  - Error:", questionsError)
    console.log("  - Count:", allQuestions?.length || 0)
    console.log("  - Sample data:", allQuestions?.slice(0, 3))
    
    // 4. Se n√£o h√° quizzes mas h√° quest√µes, criar quizzes para as quest√µes √≥rf√£s
    if ((!allQuizzes || allQuizzes.length === 0) && allQuestions && allQuestions.length > 0) {
      console.log("üö® [INVESTIGATE] PROBLEMA ENCONTRADO: H√° quest√µes sem quizzes!")
      
      // Agrupar quest√µes por quiz_id
      const quizIds = [...new Set(allQuestions.map(q => q.quiz_id))]
      console.log("üîß [INVESTIGATE] Quiz IDs encontrados nas quest√µes:", quizIds)
      
      // Verificar se existem quizzes para esses IDs
      const { data: existingQuizzes } = await supabase
        .from("quizzes")
        .select("id")
        .in("id", quizIds)
      
      console.log("üîß [INVESTIGATE] Quizzes existentes para esses IDs:", existingQuizzes)
      
      // Criar quizzes que est√£o faltando
      if (allTopics && allTopics.length > 0) {
        const missingQuizIds = quizIds.filter(id => !existingQuizzes?.some(eq => eq.id === id))
        console.log("üîß [INVESTIGATE] Quiz IDs faltando:", missingQuizIds)
        
        for (const missingId of missingQuizIds) {
          const questionsForQuiz = allQuestions.filter(q => q.quiz_id === missingId)
          
          if (questionsForQuiz.length > 0) {
            const quizToCreate = {
              id: missingId,
              topic_id: allTopics[0].id, // Usar primeiro t√≥pico dispon√≠vel
              title: `Quiz ${missingId}`,
              description: `Quiz gerado automaticamente com ${questionsForQuiz.length} quest√µes`
            }
            
            console.log("üîß [INVESTIGATE] Criando quiz:", quizToCreate)
            
            const { error: insertError } = await supabase
              .from("quizzes")
              .insert(quizToCreate)
            
            if (insertError) {
              console.error("‚ùå [INVESTIGATE] Erro ao criar quiz:", insertError)
            } else {
              console.log("‚úÖ [INVESTIGATE] Quiz criado com sucesso:", missingId)
            }
          }
        }
      }
    }
    
    // 5. Fazer uma busca de teste final
    if (allTopics && allTopics.length > 0) {
      console.log("üß™ [INVESTIGATE] Testando busca com primeiro t√≥pico:", allTopics[0].id)
      
      const { data: testQuizzes, error: testError } = await supabase
        .from("quizzes")
        .select("*")
        .eq("topic_id", allTopics[0].id)
      
      console.log("üß™ [INVESTIGATE] Resultado do teste:")
      console.log("  - Error:", testError)
      console.log("  - Quizzes encontrados:", testQuizzes?.length || 0)
      console.log("  - Data:", testQuizzes)
    }
    
    return {
      quizzes: allQuizzes || [],
      topics: allTopics || [],
      questions: allQuestions || []
    }
  } catch (err) {
    console.error("‚ùå [INVESTIGATE] Erro geral:", err)
    return { quizzes: [], topics: [], questions: [] }
  }
}

// Fun√ß√£o para obter quest√µes do quiz
export async function getQuizQuestions(quizId: number) {
  try {
    const supabase = await getSupabaseClient()
    
    console.log(`üîç [DEBUG] Buscando quest√µes para quiz: ${quizId}`)

    try {
      const { data, error } = await supabase
        .from("quiz_questions")
        .select("id, quiz_id, question_text, options, correct_answer, explanation")
        .eq("quiz_id", quizId)
        .order("id")

      if (error) {
        console.error("‚ùå [DEBUG] Erro ao buscar quest√µes:", error)
        throw error
      }

      if (data && data.length > 0) {
        console.log(`‚úÖ [DEBUG] Quest√µes encontradas no Supabase: ${data.length}`)
        return data
      } else {
        console.log("‚ö†Ô∏è [DEBUG] Nenhuma quest√£o encontrada no Supabase, gerando dados mockados")
        throw new Error("Nenhuma quest√£o encontrada")
      }
    } catch (supabaseError) {
      console.log("‚ö†Ô∏è [DEBUG] Usando dados mockados como fallback")
      
      // Gerar quest√µes mockadas para o quiz
      const mockQuestions = generateMockQuizQuestions(quizId)
      
      console.log(`‚úÖ [DEBUG] Quest√µes mockadas geradas: ${mockQuestions.length}`)
      return mockQuestions
    }
  } catch (error) {
    console.error("‚ùå [DEBUG] Erro inesperado ao buscar quest√µes do quiz:", error)
    return []
  }
}

// Fun√ß√£o auxiliar para gerar quest√µes de quiz mockadas
function generateMockQuizQuestions(quizId: number) {
  // Quest√µes mockadas para diferentes quizzes
  const questionsByQuiz: Record<number, Array<{
    id: number, 
    quiz_id: number, 
    question_text: string, 
    options: string[], 
    correct_answer: string,
    explanation: string | null
  }>> = {
    1: [ // Quiz B√°sico de Fon√©tica
      {
        id: 1,
        quiz_id: 1,
        question_text: "O que √© um fonema?",
        options: [
          "Menor unidade sonora da fala que distingue significados",
          "Letra do alfabeto",
          "Sinal de pontua√ß√£o",
          "Conjunto de letras que formam uma palavra"
        ],
        correct_answer: "Menor unidade sonora da fala que distingue significados",
        explanation: "O fonema √© a menor unidade sonora que pode diferenciar significados entre palavras."
      },
      {
        id: 2,
        quiz_id: 1,
        question_text: "Quantas vogais orais existem na l√≠ngua portuguesa?",
        options: ["5", "7", "12", "26"],
        correct_answer: "7",
        explanation: "Na l√≠ngua portuguesa, temos 7 vogais orais: a, e (aberto), e (fechado), i, o (aberto), o (fechado), u."
      },
      {
        id: 3,
        quiz_id: 1,
        question_text: "O que √© um d√≠grafo?",
        options: [
          "Uma palavra com duas s√≠labas",
          "Conjunto de duas letras que representam um √∫nico fonema",
          "Um encontro consonantal",
          "Uma palavra com dois significados"
        ],
        correct_answer: "Conjunto de duas letras que representam um √∫nico fonema",
        explanation: "D√≠grafo √© quando duas letras representam apenas um som, como em 'chave', 'ninho', 'carro'."
      }
    ],
    3: [ // Quiz de Regras Ortogr√°ficas
      {
        id: 4,
        quiz_id: 3,
        question_text: "Quando devemos usar '√ß'?",
        options: [
          "Antes de 'e' e 'i'",
          "Antes de 'a', 'o' e 'u'",
          "No in√≠cio das palavras",
          "Em qualquer posi√ß√£o da palavra"
        ],
        correct_answer: "Antes de 'a', 'o' e 'u'",
        explanation: "A letra '√ß' s√≥ √© usada antes das vogais 'a', 'o' e 'u', como em 'ca√ßa', 'mo√ßo' e 'a√ß√∫car'."
      },
      {
        id: 5,
        quiz_id: 3,
        question_text: "Qual alternativa apresenta o uso correto do h√≠fen?",
        options: [
          "Anti-inflamat√≥rio",
          "Autoestima",
          "Semi-√°rido",
          "Contraataque"
        ],
        correct_answer: "Anti-inflamat√≥rio",
        explanation: "Usa-se h√≠fen quando o prefixo termina com a mesma vogal que inicia o segundo elemento, exceto com o prefixo 'co-'."
      }
    ]
  }
  
  // Se temos quest√µes espec√≠ficas para este quiz, retorn√°-las
  if (questionsByQuiz[quizId]) {
    return questionsByQuiz[quizId]
  }
  
  // Caso contr√°rio, gerar quest√µes gen√©ricas
  const mockQuestions = []
  for (let i = 1; i <= 5; i++) {
    mockQuestions.push({
      id: 1000 + i,
      quiz_id: quizId,
      question_text: `Pergunta de exemplo ${i} para o quiz ${quizId}?`,
      options: [
        `Op√ß√£o A - Resposta correta ${i}`,
        `Op√ß√£o B - Alternativa ${i}`,
        `Op√ß√£o C - Alternativa ${i}`,
        `Op√ß√£o D - Alternativa ${i}`
      ],
      correct_answer: `Op√ß√£o A - Resposta correta ${i}`,
      explanation: `Explica√ß√£o para a pergunta de exemplo ${i}`
    })
  }
  
  return mockQuestions
}

// Fun√ß√£o para submeter resultado do quiz e atribuir conquistas
export async function submitQuizResult(
  quizId: number,
  score: number,
  correct: number,
  incorrect: number,
  total: number,
  user_uuid: string
) {
  const supabase = await getSupabaseClient();
  // ... sua l√≥gica de submiss√£o ...

  // Medalha: Quiz perfeito (100% de acerto)
  if (correct === total && total > 0) {
    await grantAchievement(user_uuid, "perfect_quiz");
  }

  revalidatePath("/");
  return { success: true };
}

// Fun√ß√£o para obter reda√ß√µes do usu√°rio
export async function getRedacoesUsuario() {
  const supabase = await getSupabaseClient()
  // Implementa√ß√£o das reda√ß√µes
  return []
}

// Fun√ß√£o para obter templates de reda√ß√£o
export async function getTemplatesRedacao() {
  const supabase = await getSupabaseClient()
  // Implementa√ß√£o dos templates
  return []
}

// Fun√ß√£o para obter temas de reda√ß√£o
export async function getTemasRedacao() {
  const supabase = await getSupabaseClient()
  // Implementa√ß√£o dos temas
  return []
}

// Fun√ß√£o para obter notifica√ß√µes do usu√°rio
export async function getNotificacoesUsuario() {
  const supabase = await getSupabaseClient()
  // Implementa√ß√£o das notifica√ß√µes
  return []
}

// Fun√ß√µes espec√≠ficas para professores
export async function getRedacoesProfessor() {
  const supabase = await getSupabaseClient()

  // Dados simulados para demonstra√ß√£o
  return [
    {
      id: 1,
      titulo: "Reda√ß√£o sobre Meio Ambiente",
      tema: "Sustentabilidade no Brasil",
      status: "pendente",
      aluno_nome: "Jo√£o Silva",
      turma_nome: "3¬∫ Ano A",
      data_envio: "2024-01-15T10:30:00Z",
      urgente: true,
    },
    {
      id: 2,
      titulo: "Reda√ß√£o sobre Tecnologia",
      tema: "Impactos da IA na Sociedade",
      status: "corrigida",
      aluno_nome: "Maria Santos",
      turma_nome: "3¬∫ Ano B",
      data_envio: "2024-01-14T14:20:00Z",
      nota_ia: 850,
      correcao_ia: "Reda√ß√£o bem estruturada com argumentos s√≥lidos...",
      urgente: false,
    },
  ]
}

export async function getTurmasProfessor() {
  const supabase = await getSupabaseClient()

  // Dados simulados para demonstra√ß√£o
  return [
    {
      id: "turma-1",
      nome: "3¬∫ Ano A",
      codigo_acesso: "3A2024",
      total_alunos: 28,
      redacoes_pendentes: 5,
      periodo: "Matutino",
    },
    {
      id: "turma-2",
      nome: "3¬∫ Ano B",
      codigo_acesso: "3B2024",
      total_alunos: 25,
      redacoes_pendentes: 2,
      periodo: "Vespertino",
    },
  ]
}

export async function getEstatisticasProfessor() {
  const supabase = await getSupabaseClient()

  // Dados simulados para demonstra√ß√£o
  return {
    total_redacoes: 45,
    pendentes: 7,
    corrigidas_hoje: 3,
    media_tempo_correcao: 15,
    total_alunos: 53,
  }
}

// Fun√ß√£o para corre√ß√£o com IA
export async function corrigirRedacaoIA(redacaoId: number) {
  const supabase = await getSupabaseClient()

  // Simula√ß√£o de corre√ß√£o com IA
  const correcaoSimulada = {
    nota: Math.floor(Math.random() * 400) + 600, // Nota entre 600-1000
    feedback:
      "Reda√ß√£o bem estruturada com bons argumentos. Sugest√µes: melhorar conectivos e revisar concord√¢ncia verbal.",
  }

  // Em produ√ß√£o, aqui voc√™ salvaria no banco
  console.log("Corre√ß√£o IA simulada para reda√ß√£o", redacaoId, correcaoSimulada)

  revalidatePath("/teacher")
  return { success: true, correcao: correcaoSimulada }
}

// Fun√ß√£o para obter todas as mat√©rias
export async function getAllSubjects() {
  console.log("üîç [Server Action] getAllSubjects() iniciada")
  try {
    const supabase = await getSupabaseClient()
    console.log("üîç [Server Action] Cliente Supabase criado")
    
    try {
      // Tentar buscar do Supabase primeiro
      const { data, error } = await supabase.from("subjects").select("id, name").order("name")
      
      console.log("üîç [Server Action] Query executada")
      console.log("üîç [Server Action] Data:", data)
      console.log("üîç [Server Action] Error:", error)
      
      if (error) {
        throw error
      }
      
      if (data && data.length > 0) {
        console.log("‚úÖ [Server Action] Mat√©rias encontradas no Supabase:", data.length)
        return data
      } else {
        throw new Error("Nenhuma mat√©ria encontrada no Supabase")
      }
    } catch (supabaseError) {
      console.error("‚ö†Ô∏è [Server Action] Erro ou nenhum dado no Supabase:", supabaseError)
      console.log("‚ö†Ô∏è [Server Action] Usando dados hardcoded como fallback")
      
      // Fallback para dados hardcoded
      const hardcodedSubjects = [
        { id: 1, name: "Portugu√™s" },
        { id: 2, name: "Regulamentos" },
        { id: 3, name: "Direito Aeron√°utico" }
      ]
      
      console.log("‚úÖ [Server Action] Retornando mat√©rias hardcoded:", hardcodedSubjects.length)
      return hardcodedSubjects
    }
  } catch (error) {
    console.error("‚ùå [Server Action] Erro inesperado em getAllSubjects:", error)
    return []
  }
}

// Fun√ß√£o para obter t√≥picos por mat√©ria
export async function getTopicsBySubject(subjectId: number) {
  try {
    console.log("üîç [DEBUG] getTopicsBySubject - subjectId:", subjectId)
    
    // Dados hardcoded para fallback
    const hardcodedTopics = {
      1: [ // Portugu√™s
        { id: "fonetica-fonologia", name: "Fon√©tica e Fonologia", subject_id: 1 },
        { id: "ortografia", name: "Ortografia", subject_id: 1 },
        { id: "acentuacao-grafica", name: "Acentua√ß√£o Gr√°fica", subject_id: 1 },
        { id: "morfologia-classes", name: "Morfologia: Classes de Palavras", subject_id: 1 },
        { id: "morfologia-flexao", name: "Morfologia: Flex√£o", subject_id: 1 },
        { id: "concordancia", name: "Concord√¢ncia Verbal e Nominal", subject_id: 1 },
        { id: "regencia", name: "Reg√™ncia Verbal e Nominal", subject_id: 1 },
        { id: "crase", name: "Crase", subject_id: 1 },
        { id: "semantica-estilistica", name: "Sem√¢ntica e Estil√≠stica", subject_id: 1 },
        { id: "colocacao-pronominal", name: "Coloca√ß√£o Pronominal", subject_id: 1 }
      ],
      2: [ // Regulamentos
        { id: "estatuto-militares", name: "Estatuto dos Militares", subject_id: 2 },
        { id: "rdaer", name: "RDAER", subject_id: 2 },
        { id: "regulamentos-comuns", name: "Regulamentos Comuns", subject_id: 2 },
        { id: "ica-111-1", name: "ICA 111-1", subject_id: 2 },
        { id: "ica-111-2", name: "ICA 111-2", subject_id: 2 },
        { id: "ica-111-3", name: "ICA 111-3", subject_id: 2 },
        { id: "ica-111-6", name: "ICA 111-6", subject_id: 2 },
        { id: "portaria-gm-md-1143-2022", name: "Portaria GM-MD N¬∫ 1.143/2022", subject_id: 2 },
        { id: "rca-34-1", name: "RCA 34-1", subject_id: 2 },
        { id: "lei-13954-2019", name: "Lei 13.954/2019", subject_id: 2 }
      ],
      3: [ // Direito Aeron√°utico
        { id: "codigo-aeronautica", name: "C√≥digo Brasileiro de Aeron√°utica", subject_id: 3 },
        { id: "convencoes-internacionais", name: "Conven√ß√µes Internacionais", subject_id: 3 },
        { id: "seguranca-voo", name: "Seguran√ßa de Voo", subject_id: 3 },
        { id: "legislacao-complementar", name: "Legisla√ß√£o Complementar", subject_id: 3 }
      ]
    };
    
    try {
      const supabase = await getSupabaseClient()
      
      // Primeiro, tentar buscar com subject_id
      let { data, error } = await supabase
        .from("topics")
        .select("id, name, subject_id")
        .eq("subject_id", subjectId)
        .order("name")
      
      if (error) {
        console.log("‚ö†Ô∏è [DEBUG] Erro ao buscar com subject_id:", error.message)
        throw error
      }
      
      if (data && data.length > 0) {
        console.log("‚úÖ [DEBUG] T√≥picos encontrados no Supabase:", data.length)
        return data
      } else {
        console.log("‚ö†Ô∏è [DEBUG] Nenhum t√≥pico encontrado no Supabase, usando fallback")
        throw new Error("Nenhum t√≥pico encontrado")
      }
    } catch (supabaseError) {
      console.log("‚ö†Ô∏è [DEBUG] Usando dados hardcoded como fallback")
      console.log("‚úÖ [DEBUG] Retornando t√≥picos hardcoded para subjectId:", subjectId)
      return hardcodedTopics[subjectId as keyof typeof hardcodedTopics] || []
    }
  } catch (error) {
    console.error("‚ùå [DEBUG] Erro inesperado ao buscar t√≥picos por mat√©ria:", error)
    return []
  }
}

// ==================== FUN√á√ïES CRUD PARA FLASHCARDS (PROFESSORES/ADMINS) ====================

// Fun√ß√£o para verificar se o usu√°rio √© professor ou admin
export async function checkTeacherOrAdminAccess(userUuid: string): Promise<boolean> {
  try {
    const supabase = await getSupabaseClient()
    const { data, error } = await supabase
      .from("user_roles")
      .select("role")
      .eq("user_uuid", userUuid)
      .single()

    if (error) {
      console.error("Erro ao verificar role:", error)
      return false
    }

    return data?.role === "teacher" || data?.role === "admin"
  } catch (error) {
    console.error("Erro ao verificar acesso:", error)
    return false
  }
}

// Fun√ß√£o para criar um novo flashcard (apenas professores/admins)
export async function createFlashcard(userUuid: string, topicId: string, question: string, answer: string) {
  const supabase = await getSupabaseClient()

  // Verificar permiss√µes
  const hasAccess = await checkTeacherOrAdminAccess(userUuid)
  if (!hasAccess) {
    return { success: false, error: "Acesso negado. Apenas professores e administradores podem criar flashcards." }
  }

  const { data, error } = await supabase
    .from("flashcards")
    .insert({
      topic_id: topicId,
      question: question.trim(),
      answer: answer.trim()
    })
    .select()
    .single()

  if (error) {
    console.error("Erro ao criar flashcard:", error)
    return { success: false, error: error.message }
  }

  revalidatePath("/flashcards")
  return { success: true, data }
}

// Fun√ß√£o para atualizar um flashcard (apenas professores/admins)
export async function updateFlashcard(userUuid: string, flashcardId: number, question: string, answer: string) {
  const supabase = await getSupabaseClient()

  // Verificar permiss√µes
  const hasAccess = await checkTeacherOrAdminAccess(userUuid)
  if (!hasAccess) {
    return { success: false, error: "Acesso negado. Apenas professores e administradores podem editar flashcards." }
  }

  const { data, error } = await supabase
    .from("flashcards")
    .update({
      question: question.trim(),
      answer: answer.trim()
    })
    .eq("id", flashcardId)
    .select()
    .single()

  if (error) {
    console.error("Erro ao atualizar flashcard:", error)
    return { success: false, error: error.message }
  }

  revalidatePath("/flashcards")
  return { success: true, data }
}

// Fun√ß√£o para deletar um flashcard (apenas professores/admins)
export async function deleteFlashcard(userUuid: string, flashcardId: number) {
  const supabase = await getSupabaseClient()

  // Verificar permiss√µes
  const hasAccess = await checkTeacherOrAdminAccess(userUuid)
  if (!hasAccess) {
    return { success: false, error: "Acesso negado. Apenas professores e administradores podem deletar flashcards." }
  }

  const { error } = await supabase
    .from("flashcards")
    .delete()
    .eq("id", flashcardId)

  if (error) {
    console.error("Erro ao deletar flashcard:", error)
    return { success: false, error: error.message }
  }

  revalidatePath("/flashcards")
  return { success: true }
}

// Fun√ß√£o para obter todos os flashcards de um t√≥pico com pagina√ß√£o (para administra√ß√£o)
export async function getAllFlashcardsByTopic(userUuid: string, topicId: string, page = 1, limit = 20) {
  const supabase = await getSupabaseClient()

  console.log("üîç [DEBUG] getAllFlashcardsByTopic - userUuid:", userUuid)
  console.log("üîç [DEBUG] getAllFlashcardsByTopic - topicId:", topicId)

  // Verificar permiss√µes
  const hasAccess = await checkTeacherOrAdminAccess(userUuid)
  console.log("üîç [DEBUG] hasAccess:", hasAccess)
  
  if (!hasAccess) {
    console.log("‚ùå [DEBUG] Acesso negado para getAllFlashcardsByTopic")
    return { success: false, error: "Acesso negado. Apenas professores e administradores podem ver todos os flashcards." }
  }

  const offset = (page - 1) * limit

  // Buscar flashcards com pagina√ß√£o
  const { data: flashcards, error: flashcardsError } = await supabase
    .from("flashcards")
    .select("id, topic_id, question, answer")
    .eq("topic_id", topicId)
    .order("id", { ascending: false })
    .range(offset, offset + limit - 1)

  if (flashcardsError) {
    console.error("‚ùå [DEBUG] Erro ao buscar flashcards:", flashcardsError)
    return { success: false, error: flashcardsError.message }
  }

  console.log("‚úÖ [DEBUG] Flashcards encontrados:", flashcards?.length || 0)

  // Contar total de flashcards
  const { count, error: countError } = await supabase
    .from("flashcards")
    .select("*", { count: "exact", head: true })
    .eq("topic_id", topicId)

  if (countError) {
    console.error("‚ùå [DEBUG] Erro ao contar flashcards:", countError)
    return { success: false, error: countError.message }
  }

  console.log("‚úÖ [DEBUG] Total de flashcards no t√≥pico:", count)

  return {
    success: true,
    data: {
      flashcards: flashcards || [],
      total: count || 0,
      page,
      limit,
      totalPages: Math.ceil((count || 0) / limit)
    }
  }
}

// Fun√ß√£o para buscar um flashcard espec√≠fico por ID (para edi√ß√£o)
export async function getFlashcardById(userUuid: string, flashcardId: number) {
  const supabase = await getSupabaseClient()

  // Verificar permiss√µes
  const hasAccess = await checkTeacherOrAdminAccess(userUuid)
  if (!hasAccess) {
    return { success: false, error: "Acesso negado." }
  }

  const { data, error } = await supabase
    .from("flashcards")
    .select("id, topic_id, question, answer")
    .eq("id", flashcardId)
    .single()

  if (error) {
    console.error("Erro ao buscar flashcard:", error)
    return { success: false, error: error.message }
  }

  return { success: true, data }
}

// CRUD para Quizzes
export async function createQuiz(userUuid: string, topicId: string, title: string, description?: string) {
  const supabase = await getSupabaseClient()
  
  try {
    // Verificar se √© professor ou admin
    const hasAccess = await checkTeacherOrAdminAccess(userUuid)
    if (!hasAccess) {
      throw new Error("Acesso negado. Apenas professores e administradores podem criar quizzes.")
    }

    const { data, error } = await supabase
      .from('quizzes')
      .insert({
        topic_id: topicId,
        title: title.trim(),
        description: description?.trim() || null
      })
      .select('*')
      .single()

    if (error) throw error
    return data
  } catch (error) {
    console.error('Erro ao criar quiz:', error)
    throw error
  }
}

export async function updateQuiz(userUuid: string, quizId: number, title: string, description?: string) {
  const supabase = await getSupabaseClient()
  
  try {
    // Verificar se √© professor ou admin
    const hasAccess = await checkTeacherOrAdminAccess(userUuid)
    if (!hasAccess) {
      throw new Error("Acesso negado. Apenas professores e administradores podem editar quizzes.")
    }

    const { data, error } = await supabase
      .from('quizzes')
      .update({
        title: title.trim(),
        description: description?.trim() || null
      })
      .eq('id', quizId)
      .select('*')
      .single()

    if (error) throw error
    return data
  } catch (error) {
    console.error('Erro ao atualizar quiz:', error)
    throw error
  }
}

export async function deleteQuiz(userUuid: string, quizId: number) {
  const supabase = await getSupabaseClient()
  
  try {
    // Verificar se √© professor ou admin
    const hasAccess = await checkTeacherOrAdminAccess(userUuid)
    if (!hasAccess) {
      throw new Error("Acesso negado. Apenas professores e administradores podem excluir quizzes.")
    }

    // Primeiro excluir todas as quest√µes do quiz
    await supabase
      .from('quiz_questions')
      .delete()
      .eq('quiz_id', quizId)

    // Depois excluir o quiz
    const { error } = await supabase
      .from('quizzes')
      .delete()
      .eq('id', quizId)

    if (error) throw error
    return { success: true }
  } catch (error) {
    console.error('Erro ao excluir quiz:', error)
    throw error
  }
}

export async function getAllQuizzesByTopic(userUuid: string, topicId: string, page: number = 1, limit: number = 10) {
  const supabase = await getSupabaseClient()
  
  console.log("üîç [DEBUG] getAllQuizzesByTopic - userUuid:", userUuid)
  console.log("üîç [DEBUG] getAllQuizzesByTopic - topicId:", topicId)
  
  try {
    // Verificar se √© professor ou admin
    const hasAccess = await checkTeacherOrAdminAccess(userUuid)
    console.log("üîç [DEBUG] hasAccess para quizzes:", hasAccess)
    
    if (!hasAccess) {
      console.log("‚ùå [DEBUG] Acesso negado para getAllQuizzesByTopic")
      throw new Error("Acesso negado. Apenas professores e administradores podem acessar esta fun√ß√£o.")
    }

    const offset = (page - 1) * limit

    // Buscar quizzes com pagina√ß√£o
    const { data: quizzes, error: quizzesError } = await supabase
      .from('quizzes')
      .select('*')
      .eq('topic_id', topicId)
      .order('id', { ascending: false })
      .range(offset, offset + limit - 1)

    if (quizzesError) {
      console.error("‚ùå [DEBUG] Erro ao buscar quizzes:", quizzesError)
      throw quizzesError
    }

    console.log("‚úÖ [DEBUG] Quizzes encontrados:", quizzes?.length || 0)

    // Buscar total de quizzes
    const { count, error: countError } = await supabase
      .from('quizzes')
      .select('*', { count: 'exact', head: true })
      .eq('topic_id', topicId)

    if (countError) {
      console.error("‚ùå [DEBUG] Erro ao contar quizzes:", countError)
      throw countError
    }

    console.log("‚úÖ [DEBUG] Total de quizzes no t√≥pico:", count)

    return {
      quizzes: quizzes || [],
      total: count || 0
    }
  } catch (error) {
    console.error('‚ùå [DEBUG] Erro ao buscar quizzes do admin:', error)
    throw error
  }
}

// CRUD para Quest√µes de Quiz
export async function createQuizQuestion(
  userUuid: string,
  quizId: number, 
  questionText: string, 
  options: string[], 
  correctAnswer: string, 
  explanation?: string
) {
  const supabase = await getSupabaseClient()
  
  try {
    // Verificar se √© professor ou admin
    const hasAccess = await checkTeacherOrAdminAccess(userUuid)
    if (!hasAccess) {
      throw new Error("Acesso negado. Apenas professores e administradores podem criar quest√µes.")
    }

    const { data, error } = await supabase
      .from('quiz_questions')
      .insert({
        quiz_id: quizId,
        question_text: questionText.trim(),
        options: options.filter(opt => opt.trim()),
        correct_answer: correctAnswer.trim(),
        explanation: explanation?.trim() || null
      })
      .select('*')
      .single()

    if (error) throw error
    return data
  } catch (error) {
    console.error('Erro ao criar quest√£o:', error)
    throw error
  }
}

export async function updateQuizQuestion(
  userUuid: string,
  questionId: number,
  questionText: string, 
  options: string[], 
  correctAnswer: string, 
  explanation?: string
) {
  const supabase = await getSupabaseClient()
  
  try {
    // Verificar se √© professor ou admin
    const hasAccess = await checkTeacherOrAdminAccess(userUuid)
    if (!hasAccess) {
      throw new Error("Acesso negado. Apenas professores e administradores podem editar quest√µes.")
    }

    const { data, error } = await supabase
      .from('quiz_questions')
      .update({
        question_text: questionText.trim(),
        options: options.filter(opt => opt.trim()),
        correct_answer: correctAnswer.trim(),
        explanation: explanation?.trim() || null
      })
      .eq('id', questionId)
      .select('*')
      .single()

    if (error) throw error
    return data
  } catch (error) {
    console.error('Erro ao atualizar quest√£o:', error)
    throw error
  }
}

export async function deleteQuizQuestion(userUuid: string, questionId: number) {
  const supabase = await getSupabaseClient()
  
  try {
    // Verificar se √© professor ou admin
    const hasAccess = await checkTeacherOrAdminAccess(userUuid)
    if (!hasAccess) {
      throw new Error("Acesso negado. Apenas professores e administradores podem excluir quest√µes.")
    }

    const { error } = await supabase
      .from('quiz_questions')
      .delete()
      .eq('id', questionId)

    if (error) throw error
    return { success: true }
  } catch (error) {
    console.error('Erro ao excluir quest√£o:', error)
    throw error
  }
}

export async function getAllQuestionsByQuiz(userUuid: string, quizId: number) {
  const supabase = await getSupabaseClient()
  
  console.log("üîç [DEBUG] getAllQuestionsByQuiz - userUuid:", userUuid)
  console.log("üîç [DEBUG] getAllQuestionsByQuiz - quizId:", quizId)
  
  try {
    // Verificar se √© professor ou admin
    const hasAccess = await checkTeacherOrAdminAccess(userUuid)
    console.log("üîç [DEBUG] hasAccess para quest√µes:", hasAccess)
    
    if (!hasAccess) {
      console.log("‚ùå [DEBUG] Acesso negado para getAllQuestionsByQuiz")
      throw new Error("Acesso negado. Apenas professores e administradores podem acessar esta fun√ß√£o.")
    }

    const { data, error } = await supabase
      .from('quiz_questions')
      .select('*')
      .eq('quiz_id', quizId)
      .order('id', { ascending: true })

    if (error) {
      console.error("‚ùå [DEBUG] Erro ao buscar quest√µes:", error)
      throw error
    }

    console.log("‚úÖ [DEBUG] Quest√µes encontradas:", data?.length || 0)
    return data || []
  } catch (error) {
    console.error('‚ùå [DEBUG] Erro ao buscar quest√µes do quiz:', error)
    throw error
  }
}

// ====================
// CALENDAR EVENTS CRUD
// ====================

export interface CalendarEvent {
  id?: string
  title: string
  description?: string
  event_type: 'live' | 'simulado' | 'prova' | 'redacao' | 'aula'
  event_date: string // YYYY-MM-DD format
  event_time?: string // HH:MM format
  duration_minutes?: number
  instructor?: string
  location?: string
  is_mandatory?: boolean
  max_participants?: number
  registration_required?: boolean
  event_url?: string
  created_by?: string
  created_at?: string
  updated_at?: string
  updated_by?: string
}

// Fun√ß√£o para verificar se usu√°rio √© professor ou admin para calend√°rio
export async function checkCalendarAccess(userUuid: string) {
  try {
    const supabase = await getSupabaseClient()
    
    console.log('Verificando acesso ao calend√°rio para usu√°rio:', userUuid)
    
    const { data, error } = await supabase
      .from('user_roles')
      .select('role')
      .eq('user_uuid', userUuid)
      .single()

    if (error) {
      console.error('Erro ao verificar role do usu√°rio:', error)
      // Verificar se a tabela user_roles existe
      const { data: tables, error: tableError } = await supabase
        .from('information_schema.tables')
        .select('table_name')
        .eq('table_schema', 'public')
        .eq('table_name', 'user_roles')
      
      if (tableError || !tables || tables.length === 0) {
        throw new Error('Tabela user_roles n√£o existe. Execute os scripts de configura√ß√£o do banco.')
      }
      
      throw new Error('Erro ao verificar permiss√µes: ' + error.message)
    }

    console.log('Role do usu√°rio:', data?.role)
    return data?.role === 'teacher' || data?.role === 'admin'
  } catch (error) {
    console.error('Erro ao verificar acesso ao calend√°rio:', error)
    throw error
  }
}

// Buscar todos os eventos do calend√°rio
export async function getAllCalendarEvents(): Promise<CalendarEvent[]> {
  try {
    const supabase = await getSupabaseClient()

    console.log('Buscando todos os eventos do calend√°rio...')

    const { data, error } = await supabase
      .from('calendar_events')
      .select('*')
      .order('event_date', { ascending: true })

    if (error) {
      console.error('Erro SQL ao buscar eventos:', error)
      // Verificar se a tabela existe
      if (error.code === 'PGRST116' || error.message?.includes('does not exist')) {
        throw new Error('Tabela calendar_events n√£o existe. Execute o script: scripts/063_fix_calendar_events_table.sql')
      }
      throw new Error('Erro ao buscar eventos: ' + error.message)
    }

    console.log('Eventos encontrados:', data?.length || 0)
    return data || []
  } catch (error) {
    console.error('Erro ao buscar eventos do calend√°rio:', error)
    throw error
  }
}

// Buscar eventos por m√™s
export async function getCalendarEventsByMonth(year: number, month: number): Promise<CalendarEvent[]> {
  try {
    const supabase = await getSupabaseClient()
    
    const startDate = `${year}-${String(month).padStart(2, '0')}-01`
    const endDate = `${year}-${String(month).padStart(2, '0')}-31`

    const { data, error } = await supabase
      .from('calendar_events')
      .select('*')
      .gte('event_date', startDate)
      .lte('event_date', endDate)
      .order('event_date', { ascending: true })

    if (error) throw error
    return data || []
  } catch (error) {
    console.error('Erro ao buscar eventos por m√™s:', error)
    throw error
  }
}

// Buscar evento por ID
export async function getCalendarEventById(eventId: string): Promise<CalendarEvent | null> {
  try {
    const supabase = await getSupabaseClient()

    const { data, error } = await supabase
      .from('calendar_events')
      .select('*')
      .eq('id', eventId)
      .single()

    if (error) throw error
    return data
  } catch (error) {
    console.error('Erro ao buscar evento por ID:', error)
    throw error
  }
}

// Criar novo evento do calend√°rio
export async function createCalendarEvent(userUuid: string, eventData: CalendarEvent): Promise<CalendarEvent> {
  try {
    console.log('Criando evento do calend√°rio para usu√°rio:', userUuid)
    console.log('Dados do evento:', eventData)
    
    // Verificar acesso
    const hasAccess = await checkCalendarAccess(userUuid)
    if (!hasAccess) {
      throw new Error('Acesso negado. Apenas professores e administradores podem criar eventos.')
    }

    const supabase = await getSupabaseClient()

    const { data, error } = await supabase
      .from('calendar_events')
      .insert([{
        ...eventData,
        created_by: userUuid,
        updated_by: userUuid
      }])
      .select()
      .single()

    if (error) {
      console.error('Erro SQL ao criar evento:', error)
      if (error.code === 'PGRST116' || error.message?.includes('does not exist')) {
        throw new Error('Tabela calendar_events n√£o existe. Execute o script: scripts/063_fix_calendar_events_table.sql')
      }
      if (error.code === '23514' && error.message?.includes('event_type')) {
        throw new Error('Tipo de evento inv√°lido. Use: live, simulado, prova, redacao ou aula')
      }
      if (error.code === '23503') {
        throw new Error('Erro de refer√™ncia: usu√°rio n√£o encontrado')
      }
      throw new Error('Erro ao criar evento: ' + error.message)
    }

    console.log('Evento criado com sucesso:', data)
    return data
  } catch (error) {
    console.error('Erro ao criar evento do calend√°rio:', error)
    throw error
  }
}

// Atualizar evento do calend√°rio
export async function updateCalendarEvent(userUuid: string, eventId: string, eventData: Partial<CalendarEvent>): Promise<CalendarEvent> {
  try {
    // Verificar acesso
    const hasAccess = await checkCalendarAccess(userUuid)
    if (!hasAccess) {
      throw new Error('Acesso negado. Apenas professores e administradores podem editar eventos.')
    }

    const supabase = await getSupabaseClient()

    const { data, error } = await supabase
      .from('calendar_events')
      .update({
        ...eventData,
        updated_by: userUuid
      })
      .eq('id', eventId)
      .select()
      .single()

    if (error) throw error
    return data
  } catch (error) {
    console.error('Erro ao atualizar evento do calend√°rio:', error)
    throw error
  }
}

// Deletar evento do calend√°rio
export async function deleteCalendarEvent(userUuid: string, eventId: string): Promise<void> {
  try {
    // Verificar acesso
    const hasAccess = await checkCalendarAccess(userUuid)
    if (!hasAccess) {
      throw new Error('Acesso negado. Apenas professores e administradores podem deletar eventos.')
    }

    const supabase = await getSupabaseClient()

    const { error } = await supabase
      .from('calendar_events')
      .delete()
      .eq('id', eventId)

    if (error) throw error
  } catch (error) {
    console.error('Erro ao deletar evento do calend√°rio:', error)
    throw error
  }
}
