const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkQuizPermissions() {
  console.log('üîç Verificando permiss√µes do quiz...\n');

  try {
    // 1. Verificar todas as permiss√µes
    console.log('1Ô∏è‚É£ Verificando todas as permiss√µes...');
    const { data: allPermissions, error: allError } = await supabase
      .from('page_permissions')
      .select('*');
    
    if (allError) {
      console.log('‚ùå Erro ao verificar permiss√µes:', allError.message);
    } else {
      console.log(`‚úÖ ${allPermissions.length} permiss√µes encontradas:`);
      allPermissions.forEach(perm => {
        console.log(`  - User: ${perm.user_id}, Page: ${perm.page_name}, Access: ${perm.has_access}`);
      });
    }

    // 2. Verificar usu√°rios
    console.log('\n2Ô∏è‚É£ Verificando usu√°rios...');
    const { data: users, error: usersError } = await supabase
      .from('user_profiles')
      .select('*');
    
    if (usersError) {
      console.log('‚ùå Erro ao verificar usu√°rios:', usersError.message);
    } else {
      console.log(`‚úÖ ${users.length} usu√°rios encontrados:`);
      users.forEach(user => {
        console.log(`  - ID: ${user.id}, User ID: ${user.user_id}, Role: ${user.role}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

checkQuizPermissions();
