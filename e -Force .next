"use client"

import { useState, useEffect } from "react"
import { DashboardShell } from "@/components/dashboard-shell"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { BrainCircuit, Play, CheckCircle, XCircle, ArrowRight, RotateCcw, Trophy, Star, Share2, Copy, Settings, Plus, Edit, Trash2, Save, X, Eye, EyeOff, Users, Shield, Target, Clock, RefreshCw } from "lucide-react"
import { 
  getAllTopics, 
  getQuizzesByTopic, 
  getQuizQuestions, 
  submitQuizResult, 
  getAllSubjects, 
  getTopicsBySubject,
  createQuiz,
  updateQuiz,
  deleteQuiz,
  getAllQuizzesByTopic,
  createQuizQuestion,
  updateQuizQuestion,
  deleteQuizQuestion,
  getAllQuestionsByQuiz
} from "@/actions"
import { getUserRoleClient, getAuthAndRole } from "@/lib/get-user-role"
import Link from "next/link"
import { createClient } from "@/lib/supabase/client"
import { useToast } from "@/components/ui/use-toast"

interface Topic {
  id: string
  name: string
}

interface Quiz {
  id: number
  topic_id: string
  title: string
  description: string | null
}

interface QuizQuestion {
  id: number
  quiz_id: number
  question_text: string
  options: string[]
  correct_answer: string
  explanation: string | null
}

export default function QuizPage() {
  const [subjects, setSubjects] = useState<{ id: number; name: string }[]>([])
  const [selectedSubject, setSelectedSubject] = useState<number | null>(null)
  const [topics, setTopics] = useState<Topic[]>([])
  const [selectedTopic, setSelectedTopic] = useState<string | null>(null)
  const [quizzes, setQuizzes] = useState<Quiz[]>([])
  const [selectedQuiz, setSelectedQuiz] = useState<Quiz | null>(null)
  const [questions, setQuestions] = useState<QuizQuestion[]>([])
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState<string>("")
  const [userAnswers, setUserAnswers] = useState<string[]>([])
  const [showResult, setShowResult] = useState(false)
  const [quizResult, setQuizResult] = useState<{ score: number; correct: number; total: number } | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [mode, setMode] = useState<"topics" | "quizzes" | "quiz" | "result">("topics")
  
  // Estados para modo admin
  const [userRole, setUserRole] = useState<string | null>(null)
  const [isAdminMode, setIsAdminMode] = useState(false)
  const [showCreateQuizModal, setShowCreateQuizModal] = useState(false)
  const [showEditQuizModal, setShowEditQuizModal] = useState(false)
  const [showCreateQuestionModal, setShowCreateQuestionModal] = useState(false)
  const [showEditQuestionModal, setShowEditQuestionModal] = useState(false)
  const [editingQuiz, setEditingQuiz] = useState<Quiz | null>(null)
  const [editingQuestion, setEditingQuestion] = useState<QuizQuestion | null>(null)
  const [adminQuizzes, setAdminQuizzes] = useState<Quiz[]>([])
  const [adminQuestions, setAdminQuestions] = useState<QuizQuestion[]>([])
  const [adminPage, setAdminPage] = useState(1)
  const [adminTotal, setAdminTotal] = useState(0)
  const [isSubmitting, setIsSubmitting] = useState(false)
  
  // Estados dos formul√°rios
  const [formQuizTitle, setFormQuizTitle] = useState("")
  const [formQuizDescription, setFormQuizDescription] = useState("")
  const [formQuestionText, setFormQuestionText] = useState("")
  const [formOptions, setFormOptions] = useState(["", "", "", ""])
  const [formCorrectAnswer, setFormCorrectAnswer] = useState("")
  const [formExplanation, setFormExplanation] = useState("")

  const supabase = createClient();
  const { toast } = useToast();

  useEffect(() => {
    async function fetchData() {
      try {
        console.log("üîç [QUIZ PAGE] Iniciando carregamento de dados...")

        // Verifica√ß√£o otimizada de autentica√ß√£o e role (mesmo padr√£o do flashcards)
        const { user, role, isAuthenticated } = await getAuthAndRole()
        
        console.log("üîç [QUIZ PAGE] getAuthAndRole result:", { user: !!user, role, isAuthenticated })
        
        if (isAuthenticated && user) {
          console.log("‚úÖ [QUIZ PAGE] Usu√°rio autenticado:", user.email)
          console.log("‚úÖ [QUIZ PAGE] Role do usu√°rio:", role)
          setUserRole(role)
        } else {
          console.log("‚ùå [QUIZ PAGE] Usu√°rio n√£o autenticado")
          setUserRole('student')
        }

        // Buscar subjects
        console.log("üîç [QUIZ PAGE] Buscando subjects...")
        const subjectsData = await getAllSubjects()
        if (subjectsData && subjectsData.length > 0) {
          setSubjects(subjectsData)
          console.log("‚úÖ [QUIZ PAGE] Subjects carregados:", subjectsData.length)
        }

      } catch (error) {
        console.error("‚ùå [QUIZ PAGE] Erro ao carregar dados:", error)
        toast({
          title: "Erro",
          description: "Erro ao carregar dados",
          variant: "destructive"
        })
      } finally {
        setIsLoading(false)
      }
    }
    fetchData()
  }, [])

  useEffect(() => {
    async function fetchTopics() {
      if (selectedSubject) {
        try {
          console.log("üîç [QUIZ PAGE] Carregando topics para subject:", selectedSubject)
          const data = await getTopicsBySubject(selectedSubject)
          console.log("‚úÖ [QUIZ PAGE] Topics carregados:", data)
          setTopics(data)
        } catch (error) {
          console.error("‚ùå [QUIZ PAGE] Erro ao carregar topics:", error)
          setTopics([])
        }
      } else {
        setTopics([])
      }
    }
    fetchTopics()
  }, [selectedSubject])

         const loadQuizzes = async (topicId: string) => {
    setIsLoading(true)
    try {
      console.log("üîç [QUIZ PAGE] Carregando quizzes para t√≥pico:", topicId)
      const quizzesData = await getQuizzesByTopic(topicId)
      console.log("‚úÖ [QUIZ PAGE] Quizzes carregados:", quizzesData)
      
      setQuizzes(quizzesData)
      setSelectedTopic(topicId)
      setMode("quizzes")
    } catch (error) {
      console.error("‚ùå [QUIZ PAGE] Erro ao carregar quizzes:", error)
      alert("Erro ao carregar quizzes. Tente novamente.")
    } finally {
      setIsLoading(false)
    }
  }

  // Fun√ß√£o para carregar quizzes no modo admin
  const loadAdminQuizzes = async (topicId: string) => {
    setIsLoading(true)
    try {
      const { data: { user } } = await supabase.auth.getUser()
      if (!user?.id) {
        alert("Usu√°rio n√£o autenticado")
        return
      }
      
      const { quizzes: data, total } = await getAllQuizzesByTopic(user.id, topicId, adminPage, 10)
      setAdminQuizzes(data)
      setAdminTotal(total)
      setSelectedTopic(topicId)
      setMode("quizzes") // Adicionar esta linha para definir o mode
    } catch (error) {
      console.error("Erro ao carregar quizzes do admin:", error)
      alert("Erro ao carregar quizzes. Tente novamente.")
    } finally {
      setIsLoading(false)
    }
  }

  // Fun√ß√£o para carregar quest√µes no modo admin
  const loadAdminQuestions = async (quizId: number) => {
    setIsLoading(true)
    try {
      const { data: { user } } = await supabase.auth.getUser()
      if (!user?.id) {
        alert("Usu√°rio n√£o autenticado")
        return
      }
      
      const data = await getAllQuestionsByQuiz(user.id, quizId)
      setAdminQuestions(data)
      setSelectedQuiz(adminQuizzes.find(q => q.id === quizId) || null)
      setMode("quiz") // Adicionar esta linha para definir o mode
    } catch (error) {
      console.error("Erro ao carregar quest√µes do admin:", error)
      alert("Erro ao carregar quest√µes. Tente novamente.")
  