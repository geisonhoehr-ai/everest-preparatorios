# üìã INSTRU√á√ïES PARA USAR OS ARQUIVOS .TXT COM CLAUDE IA

## üéØ **OBJETIVO:**

Esta pasta cont√©m todos os arquivos de documenta√ß√£o do projeto Everest Preparat√≥rios convertidos para formato `.txt` para facilitar o uso com o Claude IA.

## üìÅ **ARQUIVOS DISPON√çVEIS:**

### **1. PROMPT_AGENTE_IA.txt** (ARQUIVO PRINCIPAL)
- **Descri√ß√£o**: Prompt completo para o Agente de IA
- **Conte√∫do**: Miss√£o, contexto, metodologia, padr√µes de c√≥digo
- **Tamanho**: ~6KB
- **Uso**: Copiar este conte√∫do para treinar o agente

### **2. ESTRUTURA_PROJETO.txt**
- **Descri√ß√£o**: Arquitetura e organiza√ß√£o do projeto
- **Conte√∫do**: Estrutura de diret√≥rios, tecnologias, componentes
- **Tamanho**: ~9KB

### **3. BANCO_DADOS_SCHEMA.txt**
- **Descri√ß√£o**: Schema completo do banco de dados
- **Conte√∫do**: Tabelas, relacionamentos, RLS, queries
- **Tamanho**: ~15KB

### **4. COMPONENTES_UI.txt**
- **Descri√ß√£o**: Sistema de design e componentes
- **Conte√∫do**: Shadcn/ui, responsividade, padr√µes
- **Tamanho**: ~12KB

### **5. AUTENTICACAO_ROLES.txt**
- **Descri√ß√£o**: Sistema de autentica√ß√£o e permiss√µes
- **Conte√∫do**: Supabase Auth, roles, prote√ß√£o de rotas
- **Tamanho**: ~15KB

### **6. BUGS_SOLUCOES.txt**
- **Descri√ß√£o**: Hist√≥rico de bugs e solu√ß√µes
- **Conte√∫do**: Problemas conhecidos, corre√ß√µes, preven√ß√£o
- **Tamanho**: ~12KB

### **7. README.txt**
- **Descri√ß√£o**: Instru√ß√µes gerais de uso
- **Conte√∫do**: Como usar, √°reas de foco, padr√µes
- **Tamanho**: ~6KB

## üöÄ **COMO USAR COM CLAUDE IA:**

### **1. Para Treinar o Agente:**
```markdown
1. Copie o conte√∫do de PROMPT_AGENTE_IA.txt
2. Cole no prompt de treinamento do Claude IA
3. Adicione os outros arquivos .txt como contexto
4. Configure o agente para responder em portugu√™s brasileiro
```

### **2. Para Consulta R√°pida:**
```markdown
- ESTRUTURA_PROJETO.txt ‚Üí Arquitetura e organiza√ß√£o
- BANCO_DADOS_SCHEMA.txt ‚Üí Problemas de banco de dados
- COMPONENTES_UI.txt ‚Üí Problemas de interface
- AUTENTICACAO_ROLES.txt ‚Üí Problemas de autentica√ß√£o
- BUGS_SOLUCOES.txt ‚Üí Hist√≥rico de solu√ß√µes
```

### **3. Para Implementar Solu√ß√µes:**
```markdown
1. Identifique o tipo de problema
2. Consulte o arquivo relevante
3. Use os exemplos de c√≥digo fornecidos
4. Siga os padr√µes estabelecidos
5. Teste a solu√ß√£o implementada
```

## üéØ **√ÅREAS DE FOCO:**

### **Autentica√ß√£o e Sess√£o:**
- Login/logout n√£o funcionando
- Sess√£o n√£o persistente
- Roles n√£o detectados
- Menu admin n√£o aparecendo

### **Banco de Dados:**
- Erros de RLS (Row Level Security)
- Problemas de schema (UUID vs TEXT)
- Queries com erro
- Relacionamentos quebrados

### **UI/UX:**
- Componentes n√£o responsivos
- Estilos quebrados
- Estados de loading
- Navega√ß√£o mobile

### **Performance:**
- Carregamento lento
- Memory leaks
- Otimiza√ß√µes de queries
- Bundle size

### **Funcionalidades:**
- Server Actions com erro
- API routes quebradas
- Upload de arquivos
- Real-time features

## üîß **PADR√ïES DE C√ìDIGO:**

### **TypeScript:**
```typescript
// Sempre tipar interfaces
interface User {
  id: string
  email: string
  role: 'student' | 'teacher' | 'admin'
}

// Usar async/await
const handleSubmit = async (data: FormData) => {
  try {
    const result = await supabase.from('table').insert(data)
    return { success: true, data: result }
  } catch (error) {
    console.error('Erro:', error)
    return { success: false, error }
  }
}
```

### **React Components:**
```typescript
// Componentes funcionais com hooks
export function MyComponent() {
  const { user, isLoading } = useAuth()
  const [state, setState] = useState()
  
  if (isLoading) return <LoadingSpinner />
  
  return (
    <div className="p-4">
      <h1>Componente</h1>
    </div>
  )
}
```

### **Logs e Debug:**
```typescript
// Sempre adicionar logs informativos
console.log('üîç [COMPONENTE] A√ß√£o:', data)
console.error('‚ùå [COMPONENTE] Erro:', error)
console.warn('‚ö†Ô∏è [COMPONENTE] Aviso:', warning)
```

## üö® **PROBLEMAS CR√çTICOS CONHECIDOS:**

### **1. Autentica√ß√£o:**
- Middleware mostrando "Sess√£o: false"
- Menu admin n√£o aparecendo para professores
- Perfil n√£o persistente entre navega√ß√µes

### **2. Banco de Dados:**
- Tabelas com `user_uuid` como UUID mas usando email
- RLS policies n√£o configuradas
- Relacionamentos quebrados entre tabelas

### **3. Performance:**
- Carregamento lento de p√°ginas
- Queries n√£o otimizadas
- Bundle size grande

## üìä **M√âTRICAS IMPORTANTES:**

### **Logs Esperados:**
```typescript
// Autentica√ß√£o
[AUTH] Sess√£o encontrada: professor@teste.com
[AUTH] Usu√°rio carregado: {email: 'professor@teste.com', role: 'teacher'}

// Sidebar
[SIDEBAR] User: {email: 'professor@teste.com', role: 'teacher'}
[SIDEBAR] Mostrando menu de professor/admin

// Middleware
[MIDDLEWARE] Rota: /dashboard Sess√£o: true
[MIDDLEWARE] Acesso permitido
```

### **Resultados Esperados:**
- ‚úÖ Menu admin aparecendo (Membros, Turmas)
- ‚úÖ Perfil mostrando "Professor"
- ‚úÖ Sess√£o persistente entre navega√ß√µes
- ‚úÖ Logs confirmando autentica√ß√£o

## üß™ **SCRIPTS DE TESTE:**

### **Testar Perfil Persistente:**
```bash
node scripts/262_test_persistent_profile.js
```

### **Verificar Banco de Dados:**
```bash
node scripts/verify_database.js
```

### **Testar Autentica√ß√£o:**
```bash
node scripts/test_auth.js
```

## üìû **COMUNICA√á√ÉO COM O AGENTE:**

### **Ao Reportar um Bug:**
1. **Descreva** o problema espec√≠fico
2. **Forne√ßa** logs de erro
3. **Mencione** o contexto (p√°gina, a√ß√£o)
4. **Especifique** o comportamento esperado

### **Ao Solicitar Melhorias:**
1. **Explique** o objetivo
2. **Mencione** a escala (700 usu√°rios)
3. **Considere** a responsividade
4. **Mantenha** consist√™ncia do design

## üéØ **OBJETIVO FINAL:**

O Agente de IA deve **garantir que a plataforma Everest Preparat√≥rios funcione perfeitamente para os 700 alunos**, resolvendo bugs rapidamente, mantendo a qualidade do c√≥digo e documentando todas as solu√ß√µes para refer√™ncia futura.

---

**ü§ñ DOCUMENTA√á√ÉO COMPLETA PARA AGENTE DE IA DO EVEREST PREPARAT√ìRIOS - FORMATO .TXT** 