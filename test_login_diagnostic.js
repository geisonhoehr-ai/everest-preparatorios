require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

async function testLogin() {
  console.log('üîç [DIAGN√ìSTICO] Iniciando teste de login...');
  
  // Verificar vari√°veis de ambiente
  console.log('üîß [DIAGN√ìSTICO] Verificando vari√°veis de ambiente...');
  console.log('URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ Configurada' : '‚ùå N√£o configurada');
  console.log('ANON KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ Configurada' : '‚ùå N√£o configurada');
  
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    console.error('‚ùå [DIAGN√ìSTICO] Vari√°veis de ambiente n√£o configuradas!');
    return;
  }

  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );

  try {
    // Teste 1: Verificar se o cliente Supabase est√° funcionando
    console.log('üîß [DIAGN√ìSTICO] Teste 1: Verificando cliente Supabase...');
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå [DIAGN√ìSTICO] Erro ao obter sess√£o:', sessionError);
    } else {
      console.log('‚úÖ [DIAGN√ìSTICO] Cliente Supabase funcionando');
      console.log('üìä [DIAGN√ìSTICO] Sess√£o atual:', session ? 'Ativa' : 'Inativa');
    }

    // Teste 2: Tentar login com credenciais de teste
    console.log('üîß [DIAGN√ìSTICO] Teste 2: Tentando login...');
    
    const testEmail = 'teste@everest.com';
    const testPassword = '123456';
    
    const { data, error } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });

    if (error) {
      console.error('‚ùå [DIAGN√ìSTICO] Erro no login:', error.message);
      console.error('‚ùå [DIAGN√ìSTICO] C√≥digo do erro:', error.status);
    } else {
      console.log('‚úÖ [DIAGN√ìSTICO] Login bem-sucedido!');
      console.log('üë§ [DIAGN√ìSTICO] Usu√°rio:', data.user?.email);
      console.log('üÜî [DIAGN√ìSTICO] ID:', data.user?.id);
    }

    // Teste 3: Verificar tabela user_roles
    console.log('üîß [DIAGN√ìSTICO] Teste 3: Verificando tabela user_roles...');
    
    if (data?.user?.email) {
      const { data: roleData, error: roleError } = await supabase
        .from('user_roles')
        .select('role')
        .eq('user_uuid', data.user.email)
        .single();

      if (roleError) {
        console.error('‚ùå [DIAGN√ìSTICO] Erro ao buscar role:', roleError);
      } else {
        console.log('‚úÖ [DIAGN√ìSTICO] Role encontrado:', roleData?.role);
      }
    }

    // Teste 4: Verificar se h√° usu√°rios na tabela auth.users
    console.log('üîß [DIAGN√ìSTICO] Teste 4: Verificando usu√°rios...');
    
    const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
    
    if (usersError) {
      console.error('‚ùå [DIAGN√ìSTICO] Erro ao listar usu√°rios:', usersError);
    } else {
      console.log('‚úÖ [DIAGN√ìSTICO] Usu√°rios encontrados:', users?.length || 0);
      if (users?.length > 0) {
        console.log('üìã [DIAGN√ìSTICO] Primeiros 3 usu√°rios:');
        users.slice(0, 3).forEach((user, index) => {
          console.log(`   ${index + 1}. ${user.email} (${user.id})`);
        });
      }
    }

  } catch (error) {
    console.error('‚ùå [DIAGN√ìSTICO] Erro inesperado:', error);
  }
}

testLogin(); 