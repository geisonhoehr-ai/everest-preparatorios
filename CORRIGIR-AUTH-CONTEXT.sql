-- =====================================================
-- SCRIPT PARA CRIAR VIEW DE PERFIS UNIFICADA
-- EVEREST PREPARAT√ìRIOS - CORRE√á√ÉO DO AUTH CONTEXT
-- =====================================================

-- =====================================================
-- 1. CRIAR VIEW user_profiles PARA COMPATIBILIDADE
-- =====================================================

-- Criar view que unifica users, teachers e students
CREATE OR REPLACE VIEW "public"."user_profiles" AS
SELECT 
    u.id,
    u.id as user_id,
    u.role,
    u.first_name || ' ' || u.last_name as display_name,
    u.first_name,
    u.last_name,
    u.email,
    u.is_active,
    u.created_at,
    u.updated_at,
    CASE 
        WHEN t.id IS NOT NULL THEN 'teacher'
        WHEN s.id IS NOT NULL THEN 'student'
        ELSE u.role::text
    END as profile_type,
    t.employee_id_number,
    t.hire_date,
    t.department,
    s.student_id_number,
    s.enrollment_date
FROM "public"."users" u
LEFT JOIN "public"."teachers" t ON u.id = t.user_id
LEFT JOIN "public"."students" s ON u.id = s.user_id;

-- =====================================================
-- 2. CRIAR POL√çTICAS RLS PARA A VIEW
-- =====================================================

-- Habilitar RLS na view
ALTER VIEW "public"."user_profiles" SET (security_invoker = true);

-- Pol√≠tica para usu√°rios verem seu pr√≥prio perfil
CREATE POLICY "Users can view own profile" ON "public"."user_profiles"
    FOR SELECT USING (auth.uid() = user_id);

-- Pol√≠tica para usu√°rios atualizarem seu pr√≥prio perfil
CREATE POLICY "Users can update own profile" ON "public"."user_profiles"
    FOR UPDATE USING (auth.uid() = user_id);

-- Pol√≠tica para admins verem todos os perfis
CREATE POLICY "Admins can view all profiles" ON "public"."user_profiles"
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM "public"."users" 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- =====================================================
-- 3. CRIAR FUN√á√ÉO PARA ATUALIZAR PERFIL
-- =====================================================

-- Fun√ß√£o para atualizar perfil unificado
CREATE OR REPLACE FUNCTION update_user_profile(
    p_user_id UUID,
    p_first_name VARCHAR(100),
    p_last_name VARCHAR(100),
    p_display_name VARCHAR(200)
) RETURNS BOOLEAN AS $$
BEGIN
    -- Atualizar dados b√°sicos do usu√°rio
    UPDATE "public"."users" 
    SET 
        first_name = p_first_name,
        last_name = p_last_name,
        updated_at = NOW()
    WHERE id = p_user_id;
    
    -- Verificar se a atualiza√ß√£o foi bem-sucedida
    IF FOUND THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- 4. CRIAR FUN√á√ÉO PARA BUSCAR PERFIL COMPLETO
-- =====================================================

-- Fun√ß√£o para buscar perfil completo do usu√°rio
CREATE OR REPLACE FUNCTION get_user_profile(p_user_id UUID)
RETURNS TABLE (
    id UUID,
    user_id UUID,
    role TEXT,
    display_name TEXT,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(255),
    is_active BOOLEAN,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    profile_type TEXT,
    employee_id_number VARCHAR(50),
    hire_date DATE,
    department VARCHAR(100),
    student_id_number VARCHAR(50),
    enrollment_date DATE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        u.id,
        u.id as user_id,
        u.role::text,
        u.first_name || ' ' || u.last_name as display_name,
        u.first_name,
        u.last_name,
        u.email,
        u.is_active,
        u.created_at,
        u.updated_at,
        CASE 
            WHEN t.id IS NOT NULL THEN 'teacher'
            WHEN s.id IS NOT NULL THEN 'student'
            ELSE u.role::text
        END as profile_type,
        t.employee_id_number,
        t.hire_date,
        t.department,
        s.student_id_number,
        s.enrollment_date
    FROM "public"."users" u
    LEFT JOIN "public"."teachers" t ON u.id = t.user_id
    LEFT JOIN "public"."students" s ON u.id = s.user_id
    WHERE u.id = p_user_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- 5. TESTAR A VIEW
-- =====================================================

-- Testar se a view est√° funcionando
SELECT 
    'VIEW user_profiles TESTADA' as status,
    id,
    user_id,
    role,
    display_name,
    profile_type,
    email,
    is_active
FROM "public"."user_profiles"
WHERE email IN ('admin@teste.com', 'professor@teste.com', 'aluno@teste.com')
ORDER BY role, email;

-- =====================================================
-- 6. TESTAR A FUN√á√ÉO
-- =====================================================

-- Testar a fun√ß√£o get_user_profile
SELECT 
    'FUN√á√ÉO get_user_profile TESTADA' as status,
    id,
    user_id,
    role,
    display_name,
    profile_type,
    email
FROM get_user_profile('d5ea9a5f-b373-4ebb-814e-9bbb30bae0c5'::UUID);

-- =====================================================
-- 7. VERIFICAR POL√çTICAS RLS
-- =====================================================

-- Verificar se as pol√≠ticas foram criadas
SELECT 
    'POL√çTICAS RLS DA VIEW' as status,
    schemaname,
    tablename,
    policyname,
    cmd
FROM pg_policies 
WHERE schemaname = 'public'
AND tablename = 'user_profiles'
ORDER BY policyname;

-- =====================================================
-- RESUMO
-- =====================================================

/*
‚úÖ VIEW user_profiles CRIADA COM SUCESSO!

üéØ O QUE FOI FEITO:

1. ‚úÖ VIEW UNIFICADA:
   - Criada view user_profiles que unifica users, teachers e students
   - Compat√≠vel com o c√≥digo do frontend
   - Inclui todos os dados necess√°rios

2. ‚úÖ POL√çTICAS RLS:
   - Usu√°rios podem ver seu pr√≥prio perfil
   - Usu√°rios podem atualizar seu pr√≥prio perfil
   - Admins podem ver todos os perfis

3. ‚úÖ FUN√á√ïES AUXILIARES:
   - update_user_profile: Para atualizar dados do usu√°rio
   - get_user_profile: Para buscar perfil completo

4. ‚úÖ COMPATIBILIDADE:
   - Frontend pode usar a view user_profiles
   - Estrutura do banco mantida
   - Dados unificados e consistentes

üîÑ PR√ìXIMOS PASSOS:

1. ‚úÖ Testar se a view est√° funcionando
2. ‚úÖ Verificar se as pol√≠ticas RLS est√£o corretas
3. ‚úÖ Testar login no frontend
4. ‚úÖ Verificar se o erro foi corrigido

‚ö†Ô∏è IMPORTANTE:
- A view √© apenas para leitura
- Atualiza√ß√µes devem ser feitas nas tabelas originais
- As pol√≠ticas RLS est√£o configuradas
- Compat√≠vel com o c√≥digo existente

üöÄ O erro de perfil deve estar corrigido!
*/
