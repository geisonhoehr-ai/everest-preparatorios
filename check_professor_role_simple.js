const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
)

async function checkProfessorRoleSimple() {
  try {
    console.log('üîç [VERIFICA√á√ÉO SIMPLES] Verificando role do professor...')
    
    // 1. Verificar se a fun√ß√£o RPC existe
    console.log('üîç [VERIFICA√á√ÉO] Verificando fun√ß√£o RPC...')
    const { data: rpcData, error: rpcError } = await supabase.rpc('get_role_for_current_user')
    
    if (rpcError) {
      console.log('‚ùå [VERIFICA√á√ÉO] Fun√ß√£o RPC n√£o existe ou erro:', rpcError.message)
      console.log('üí° [SOLU√á√ÉO] Precisamos criar a fun√ß√£o RPC no Supabase')
    } else {
      console.log('‚úÖ [VERIFICA√á√ÉO] Fun√ß√£o RPC existe e retornou:', rpcData)
    }
    
    // 2. Verificar usu√°rio professor@teste.com
    console.log('üîç [VERIFICA√á√ÉO] Verificando usu√°rio professor@teste.com...')
    const { data: { user }, error: userError } = await supabase.auth.signInWithPassword({
      email: 'professor@teste.com',
      password: '123456'
    })
    
    if (userError) {
      console.error('‚ùå [VERIFICA√á√ÉO] Erro ao fazer login:', userError.message)
      return
    }
    
    if (!user) {
      console.error('‚ùå [VERIFICA√á√ÉO] Usu√°rio n√£o encontrado')
      return
    }
    
    console.log('‚úÖ [VERIFICA√á√ÉO] Login realizado com sucesso')
    console.log('   - ID:', user.id)
    console.log('   - Email:', user.email)
    
    // 3. Verificar role na tabela user_roles
    console.log('üîç [VERIFICA√á√ÉO] Verificando role na tabela user_roles...')
    const { data: roleData, error: roleError } = await supabase
      .from('user_roles')
      .select('*')
      .eq('user_uuid', user.id)
      .single()
    
    if (roleError) {
      console.error('‚ùå [VERIFICA√á√ÉO] Erro ao buscar role:', roleError.message)
    } else {
      console.log('‚úÖ [VERIFICA√á√ÉO] Role encontrado:', roleData)
      console.log('üéØ [DIAGN√ìSTICO] O role est√° correto no banco: TEACHER')
    }
    
    // 4. Simular a busca que o frontend faz
    console.log('üîç [VERIFICA√á√ÉO] Simulando busca do frontend...')
    const { data: frontendRole, error: frontendError } = await supabase
      .from('user_roles')
      .select('role')
      .eq('user_uuid', user.id)
      .single()
    
    if (frontendError) {
      console.error('‚ùå [VERIFICA√á√ÉO] Erro na busca do frontend:', frontendError.message)
    } else {
      console.log('‚úÖ [VERIFICA√á√ÉO] Busca do frontend retornou:', frontendRole?.role)
    }
    
    console.log('üéØ [VERIFICA√á√ÉO] CONCLUS√ÉO:')
    console.log('   - Banco: ‚úÖ Role correto (teacher)')
    console.log('   - Frontend: ‚ùå Mostra "Estudante"')
    console.log('   - Problema: Cache ou l√≥gica do useAuth hook')
    
  } catch (error) {
    console.error('‚ùå [VERIFICA√á√ÉO] Erro geral:', error)
  }
}

checkProfessorRoleSimple()
