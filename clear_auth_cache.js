const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

console.log('üßπ [CLEAR] Limpando cache de autentica√ß√£o...')
console.log('URL:', supabaseUrl)

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function clearAuthCache() {
  try {
    console.log('\nüßπ [CLEAR] Limpando cache de roles...')
    
    // 1. Verificar se conseguimos acessar a tabela user_roles
    const { data: userRoles, error: userRolesError } = await supabase
      .from('user_roles')
      .select('*')
      .limit(5)
    
    if (userRolesError) {
      console.error('‚ùå [CLEAR] Erro ao acessar user_roles:', userRolesError)
      return
    }
    
    console.log('‚úÖ [CLEAR] Tabela user_roles acess√≠vel')
    console.log(`üìä [CLEAR] Total de roles: ${userRoles?.length || 0}`)
    
    if (userRoles && userRoles.length > 0) {
      console.log('üë• [CLEAR] Roles dispon√≠veis:')
      userRoles.forEach((role, index) => {
        console.log(`  ${index + 1}. Email: ${role.email}, Role: ${role.role}`)
      })
    }
    
    // 2. Verificar se conseguimos acessar a sess√£o atual
    console.log('\nüîç [CLEAR] Verificando sess√£o atual...')
    const { data: { session }, error: sessionError } = await supabase.auth.getSession()
    
    if (sessionError) {
      console.error('‚ùå [CLEAR] Erro ao obter sess√£o:', sessionError)
    } else if (session) {
      console.log('‚úÖ [CLEAR] Sess√£o encontrada:', session.user.email)
      console.log('üÜî [CLEAR] User ID:', session.user.id)
      
      // 3. Verificar se o usu√°rio tem role na tabela user_roles
      const { data: userRole, error: roleError } = await supabase
        .from('user_roles')
        .select('role')
        .eq('user_uuid', session.user.id)
        .single()
      
      if (roleError) {
        console.error('‚ùå [CLEAR] Erro ao buscar role do usu√°rio:', roleError)
      } else {
        console.log('‚úÖ [CLEAR] Role do usu√°rio atual:', userRole.role)
      }
    } else {
      console.log('‚ÑπÔ∏è [CLEAR] Nenhuma sess√£o encontrada')
    }
    
    console.log('\n‚úÖ [CLEAR] Cache de autentica√ß√£o verificado!')
    console.log('üí° [CLEAR] Se a p√°gina de flashcards ainda n√£o funcionar,')
    console.log('üí° [CLEAR] pode ser necess√°rio reiniciar o servidor')
    
  } catch (error) {
    console.error('‚ùå [CLEAR] Erro inesperado:', error)
  }
}

clearAuthCache()
