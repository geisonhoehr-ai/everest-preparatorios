require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

async function checkSupabaseConfig() {
  console.log('üîç [SUPABASE CONFIG] Verificando configura√ß√£o do Supabase...');
  
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );

  try {
    // Verificar configura√ß√£o de autentica√ß√£o
    console.log('üîß [SUPABASE CONFIG] Verificando configura√ß√£o de auth...');
    
    // Tentar obter informa√ß√µes sobre a configura√ß√£o
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå [SUPABASE CONFIG] Erro na sess√£o:', sessionError.message);
    } else {
      console.log('‚úÖ [SUPABASE CONFIG] Sess√£o configurada corretamente');
    }

    // Verificar se h√° problemas com a tabela auth.users
    console.log('üîß [SUPABASE CONFIG] Verificando tabela auth.users...');
    
    // Tentar inserir um registro de teste na tabela user_roles para ver se h√° problemas de permiss√£o
    console.log('üîß [SUPABASE CONFIG] Testando inser√ß√£o na tabela user_roles...');
    
    const { data: insertData, error: insertError } = await supabase
      .from('user_roles')
      .insert({
        user_uuid: 'teste@config.com',
        role: 'student'
      })
      .select();

    if (insertError) {
      console.error('‚ùå [SUPABASE CONFIG] Erro ao inserir na user_roles:', insertError.message);
      console.error('‚ùå [SUPABASE CONFIG] C√≥digo do erro:', insertError.code);
    } else {
      console.log('‚úÖ [SUPABASE CONFIG] Inser√ß√£o na user_roles funcionando');
      
      // Remover o registro de teste
      const { error: deleteError } = await supabase
        .from('user_roles')
        .delete()
        .eq('user_uuid', 'teste@config.com');
      
      if (deleteError) {
        console.error('‚ö†Ô∏è [SUPABASE CONFIG] Erro ao remover registro de teste:', deleteError.message);
      } else {
        console.log('‚úÖ [SUPABASE CONFIG] Remo√ß√£o de teste bem-sucedida');
      }
    }

    // Verificar se h√° problemas com a tabela members
    console.log('üîß [SUPABASE CONFIG] Verificando tabela members...');
    
    const { data: membersData, error: membersError } = await supabase
      .from('members')
      .select('*')
      .limit(1);

    if (membersError) {
      console.error('‚ùå [SUPABASE CONFIG] Erro ao acessar members:', membersError.message);
    } else {
      console.log('‚úÖ [SUPABASE CONFIG] Tabela members acess√≠vel');
    }

    // Verificar configura√ß√£o de email
    console.log('üîß [SUPABASE CONFIG] Verificando configura√ß√£o de email...');
    
    // Tentar criar um usu√°rio com configura√ß√£o espec√≠fica
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: 'teste-config@everest.com',
      password: '123456',
      options: {
        data: {
          full_name: 'Teste Config'
        }
      }
    });

    if (signUpError) {
      console.error('‚ùå [SUPABASE CONFIG] Erro espec√≠fico no signup:', signUpError.message);
      console.error('‚ùå [SUPABASE CONFIG] C√≥digo:', signUpError.code);
      console.error('‚ùå [SUPABASE CONFIG] Status:', signUpError.status);
      
      // Verificar se √© um problema de configura√ß√£o espec√≠fica
      if (signUpError.message.includes('Database error')) {
        console.log('üîç [SUPABASE CONFIG] Problema identificado: Erro no banco de dados');
        console.log('üí° [SUPABASE CONFIG] Poss√≠veis causas:');
        console.log('   - Pol√≠ticas de seguran√ßa (RLS) mal configuradas');
        console.log('   - Triggers ou fun√ß√µes com problemas');
        console.log('   - Configura√ß√£o de email desabilitada');
        console.log('   - Problemas com a tabela auth.users');
      }
    } else {
      console.log('‚úÖ [SUPABASE CONFIG] Signup funcionando!');
      console.log('üë§ [SUPABASE CONFIG] Usu√°rio criado:', signUpData.user?.email);
    }

  } catch (error) {
    console.error('‚ùå [SUPABASE CONFIG] Erro inesperado:', error);
  }
}

checkSupabaseConfig(); 