-- =====================================================
-- SCRIPT PARA HABILITAR RLS COMPLETO
-- EVEREST PREPARAT√ìRIOS - CONFIGURA√á√ÉO DE SEGURAN√áA
-- =====================================================

-- =====================================================
-- 1. HABILITAR RLS EM TODAS AS TABELAS
-- =====================================================

-- Habilitar RLS na tabela users
ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

-- Habilitar RLS na tabela teachers
ALTER TABLE "public"."teachers" ENABLE ROW LEVEL SECURITY;

-- Habilitar RLS na tabela students
ALTER TABLE "public"."students" ENABLE ROW LEVEL SECURITY;

-- Habilitar RLS na tabela classes
ALTER TABLE "public"."classes" ENABLE ROW LEVEL SECURITY;

-- Habilitar RLS na tabela student_classes
ALTER TABLE "public"."student_classes" ENABLE ROW LEVEL SECURITY;

-- Verificar se RLS foi habilitado
DO $$
BEGIN
    RAISE NOTICE '‚úÖ RLS habilitado em todas as tabelas!';
END $$;

-- =====================================================
-- 2. CRIAR POL√çTICAS RLS PARA TABELA USERS
-- =====================================================

-- Pol√≠tica: Usu√°rios podem ver seu pr√≥prio perfil
CREATE POLICY "Users can view their own profile" ON "public"."users"
    FOR SELECT USING (auth.uid() = id);

-- Pol√≠tica: Usu√°rios podem atualizar seu pr√≥prio perfil
CREATE POLICY "Users can update their own profile" ON "public"."users"
    FOR UPDATE USING (auth.uid() = id);

-- Pol√≠tica: Admins podem ver todos os usu√°rios
CREATE POLICY "Admins can view all users" ON "public"."users"
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM "public"."users" 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- Pol√≠tica: Admins podem gerenciar todos os usu√°rios
CREATE POLICY "Admins can manage all users" ON "public"."users"
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM "public"."users" 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- Pol√≠tica: Permitir inser√ß√£o de novos usu√°rios (para registro)
CREATE POLICY "Allow user registration" ON "public"."users"
    FOR INSERT WITH CHECK (true);

-- Pol√≠ticas RLS criadas para tabela users

-- =====================================================
-- 3. CRIAR POL√çTICAS RLS PARA TABELA TEACHERS
-- =====================================================

-- Pol√≠tica: Professores podem ver seu pr√≥prio perfil
CREATE POLICY "Teachers can view their own profile" ON "public"."teachers"
    FOR SELECT USING (user_id = auth.uid());

-- Pol√≠tica: Professores podem atualizar seu pr√≥prio perfil
CREATE POLICY "Teachers can update their own profile" ON "public"."teachers"
    FOR UPDATE USING (user_id = auth.uid());

-- Pol√≠tica: Professores podem inserir seu pr√≥prio perfil
CREATE POLICY "Teachers can insert their own profile" ON "public"."teachers"
    FOR INSERT WITH CHECK (user_id = auth.uid());

-- Pol√≠tica: Admins podem gerenciar todos os professores
CREATE POLICY "Admins can manage all teachers" ON "public"."teachers"
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM "public"."users" 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- Pol√≠tica: Professores podem ver outros professores (para colabora√ß√£o)
CREATE POLICY "Teachers can view other teachers" ON "public"."teachers"
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM "public"."users" 
            WHERE id = auth.uid() AND role IN ('teacher', 'admin')
        )
    );

-- Pol√≠ticas RLS criadas para tabela teachers

-- =====================================================
-- 4. CRIAR POL√çTICAS RLS PARA TABELA STUDENTS
-- =====================================================

-- Pol√≠tica: Alunos podem ver seu pr√≥prio perfil
CREATE POLICY "Students can view their own profile" ON "public"."students"
    FOR SELECT USING (user_id = auth.uid());

-- Pol√≠tica: Alunos podem atualizar seu pr√≥prio perfil
CREATE POLICY "Students can update their own profile" ON "public"."students"
    FOR UPDATE USING (user_id = auth.uid());

-- Pol√≠tica: Alunos podem inserir seu pr√≥prio perfil
CREATE POLICY "Students can insert their own profile" ON "public"."students"
    FOR INSERT WITH CHECK (user_id = auth.uid());

-- Pol√≠tica: Admins podem gerenciar todos os alunos
CREATE POLICY "Admins can manage all students" ON "public"."students"
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM "public"."users" 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- Pol√≠tica: Professores podem ver alunos de suas turmas
CREATE POLICY "Teachers can view their students" ON "public"."students"
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM "public"."users" 
            WHERE id = auth.uid() AND role = 'teacher'
        )
    );

-- Pol√≠ticas RLS criadas para tabela students

-- =====================================================
-- 5. CRIAR POL√çTICAS RLS PARA TABELA CLASSES
-- =====================================================

-- Pol√≠tica: Professores podem ver suas pr√≥prias turmas
CREATE POLICY "Teachers can view their own classes" ON "public"."classes"
    FOR SELECT USING (teacher_id = auth.uid());

-- Pol√≠tica: Professores podem gerenciar suas pr√≥prias turmas
CREATE POLICY "Teachers can manage their own classes" ON "public"."classes"
    FOR ALL USING (teacher_id = auth.uid());

-- Pol√≠tica: Admins podem gerenciar todas as turmas
CREATE POLICY "Admins can manage all classes" ON "public"."classes"
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM "public"."users" 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- Pol√≠tica: Alunos podem ver turmas em que est√£o matriculados
CREATE POLICY "Students can view their enrolled classes" ON "public"."classes"
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM "public"."student_classes" 
            WHERE class_id = id AND user_id = auth.uid()
        )
    );

-- Pol√≠tica: Professores podem ver outras turmas (para colabora√ß√£o)
CREATE POLICY "Teachers can view other classes" ON "public"."classes"
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM "public"."users" 
            WHERE id = auth.uid() AND role IN ('teacher', 'admin')
        )
    );

-- Pol√≠ticas RLS criadas para tabela classes

-- =====================================================
-- 6. CRIAR POL√çTICAS RLS PARA TABELA STUDENT_CLASSES
-- =====================================================

-- Pol√≠tica: Alunos podem ver suas pr√≥prias matr√≠culas
CREATE POLICY "Students can view their own enrollments" ON "public"."student_classes"
    FOR SELECT USING (user_id = auth.uid());

-- Pol√≠tica: Alunos podem se matricular em turmas
CREATE POLICY "Students can enroll in classes" ON "public"."student_classes"
    FOR INSERT WITH CHECK (user_id = auth.uid());

-- Pol√≠tica: Alunos podem cancelar suas pr√≥prias matr√≠culas
CREATE POLICY "Students can cancel their own enrollments" ON "public"."student_classes"
    FOR DELETE USING (user_id = auth.uid());

-- Pol√≠tica: Professores podem ver matr√≠culas de suas turmas
CREATE POLICY "Teachers can view their class enrollments" ON "public"."student_classes"
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM "public"."classes" 
            WHERE id = class_id AND teacher_id = auth.uid()
        )
    );

-- Pol√≠tica: Professores podem gerenciar matr√≠culas de suas turmas
CREATE POLICY "Teachers can manage their class enrollments" ON "public"."student_classes"
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM "public"."classes" 
            WHERE id = class_id AND teacher_id = auth.uid()
        )
    );

-- Pol√≠tica: Admins podem gerenciar todas as matr√≠culas
CREATE POLICY "Admins can manage all enrollments" ON "public"."student_classes"
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM "public"."users" 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- Pol√≠ticas RLS criadas para tabela student_classes

-- =====================================================
-- 7. VERIFICAR SE RLS EST√Å HABILITADO
-- =====================================================

-- Verificar se RLS est√° habilitado em todas as tabelas
SELECT 
    'RLS STATUS VERIFICADO' as status,
    schemaname,
    tablename,
    CASE 
        WHEN rowsecurity THEN '‚úÖ HABILITADO'
        ELSE '‚ùå DESABILITADO'
    END as rls_status
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN ('users', 'teachers', 'students', 'classes', 'student_classes')
ORDER BY tablename;

-- =====================================================
-- 8. VERIFICAR POL√çTICAS RLS CRIADAS
-- =====================================================

-- Verificar pol√≠ticas RLS criadas
SELECT 
    'POL√çTICAS RLS CRIADAS' as status,
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    CASE 
        WHEN qual IS NOT NULL THEN 'Com condi√ß√£o'
        ELSE 'Sem condi√ß√£o'
    END as tem_condicao
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- =====================================================
-- 9. TESTAR POL√çTICAS RLS
-- =====================================================

-- Testar se as pol√≠ticas est√£o funcionando
DO $$
DECLARE
    test_user_id UUID;
    test_teacher_id UUID;
    test_class_id UUID;
BEGIN
    RAISE NOTICE 'üß™ TESTANDO POL√çTICAS RLS...';
    
    -- Verificar se existe usu√°rio admin para teste
    SELECT id INTO test_user_id FROM "public"."users" WHERE email = 'admin@teste.com' LIMIT 1;
    
    IF test_user_id IS NOT NULL THEN
        RAISE NOTICE '‚úÖ Usu√°rio admin encontrado: %', test_user_id;
        
        -- Verificar se pode ver seu pr√≥prio perfil
        IF EXISTS (SELECT 1 FROM "public"."users" WHERE id = test_user_id) THEN
            RAISE NOTICE '‚úÖ Pol√≠tica de visualiza√ß√£o pr√≥pria funcionando';
        END IF;
        
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Usu√°rio admin n√£o encontrado. Execute primeiro o script de corre√ß√£o do enum.';
    END IF;
    
    RAISE NOTICE '‚úÖ Teste de pol√≠ticas RLS conclu√≠do!';
END $$;

-- =====================================================
-- 10. RESUMO FINAL
-- =====================================================

/*
‚úÖ RLS (ROW LEVEL SECURITY) CONFIGURADO COM SUCESSO!

üéØ O QUE FOI FEITO:

1. ‚úÖ HABILITA√á√ÉO RLS:
   - Habilitou RLS em todas as tabelas principais
   - Configurou seguran√ßa por linha

2. ‚úÖ POL√çTICAS CRIADAS:
   - users: Visualiza√ß√£o e edi√ß√£o pr√≥pria + admin total
   - teachers: Perfil pr√≥prio + admin total + colabora√ß√£o
   - students: Perfil pr√≥prio + admin total + professores
   - classes: Turmas pr√≥prias + admin total + alunos matriculados
   - student_classes: Matr√≠culas pr√≥prias + admin total + professores

3. ‚úÖ SEGURAN√áA IMPLEMENTADA:
   - Usu√°rios s√≥ veem seus pr√≥prios dados
   - Admins t√™m acesso total
   - Professores podem ver alunos de suas turmas
   - Alunos podem ver turmas em que est√£o matriculados

4. ‚úÖ VERIFICA√á√ÉO:
   - Confirmou que RLS est√° habilitado
   - Listou todas as pol√≠ticas criadas
   - Testou funcionamento b√°sico

üîÑ PR√ìXIMOS PASSOS:

1. ‚úÖ Verificar se RLS est√° funcionando
2. ‚úÖ Testar login e autentica√ß√£o
3. ‚úÖ Verificar se as pol√≠ticas est√£o corretas
4. ‚úÖ Ajustar pol√≠ticas se necess√°rio
5. ‚úÖ Testar funcionalidades espec√≠ficas

‚ö†Ô∏è IMPORTANTE:
- RLS est√° habilitado em todas as tabelas
- Pol√≠ticas b√°sicas est√£o configuradas
- Teste as funcionalidades antes de usar em produ√ß√£o
- Ajuste as pol√≠ticas conforme necess√°rio

üöÄ O sistema de seguran√ßa est√° configurado!
*/
