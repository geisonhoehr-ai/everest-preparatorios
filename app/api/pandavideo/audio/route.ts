import { NextRequest, NextResponse } from 'next/server'

const PANDAVIDEO_API_KEY = process.env.PANDAVIDEO_API_KEY

export async function POST(request: NextRequest) {
  try {
    const { video_id, title } = await request.json()
    
    if (!video_id && !title) {
      return NextResponse.json({ 
        success: false, 
        error: 'ID do v√≠deo ou t√≠tulo s√£o obrigat√≥rios' 
      }, { status: 400 })
    }

    if (!PANDAVIDEO_API_KEY) {
      return NextResponse.json({ 
        success: false, 
        error: 'API Key do PandaVideo n√£o configurada' 
      }, { status: 500 })
    }

    let video = null

    // Se tem ID, buscar v√≠deo espec√≠fico
    if (video_id) {
      console.log('üéµ [Audio API] Buscando v√≠deo por ID:', video_id)
      
      const response = await fetch(`https://api-v2.pandavideo.com.br/videos/${video_id}`, {
        headers: {
          'Authorization': `Bearer ${PANDAVIDEO_API_KEY}`,
          'Content-Type': 'application/json'
        }
      })

      if (response.ok) {
        video = await response.json()
      }
    }

    // Se n√£o encontrou por ID ou tem t√≠tulo, buscar por t√≠tulo
    if (!video && title) {
      console.log('üéµ [Audio API] Buscando v√≠deo por t√≠tulo:', title)
      
      const searchUrl = new URL('https://api-v2.pandavideo.com.br/videos')
      searchUrl.searchParams.set('title', title)
      searchUrl.searchParams.set('limit', '1')

      const response = await fetch(searchUrl.toString(), {
        headers: {
          'Authorization': `Bearer ${PANDAVIDEO_API_KEY}`,
          'Content-Type': 'application/json'
        }
      })

      if (response.ok) {
        const data = await response.json()
        video = data.data?.[0] || null
      }
    }

    if (!video) {
      return NextResponse.json({ 
        success: false, 
        error: 'V√≠deo n√£o encontrado' 
      }, { status: 404 })
    }

    // Verificar se tem HLS dispon√≠vel
    if (!video.hls_url && !video.playlist_url) {
      return NextResponse.json({ 
        success: false, 
        error: 'V√≠deo n√£o possui stream HLS dispon√≠vel' 
      }, { status: 400 })
    }

    // Retornar dados de √°udio
    const audioData = {
      video_id: video.id,
      hls_url: video.hls_url || video.playlist_url,
      title: video.title,
      duration: video.duration,
      status: video.status,
      thumbnail: video.thumbnail_url,
      created_at: video.created_at
    }

    console.log('‚úÖ [Audio API] √Åudio encontrado:', audioData.title)

    return NextResponse.json({
      success: true,
      audio: audioData
    })

  } catch (error) {
    console.error('‚ùå [Audio API] Erro interno:', error)
    return NextResponse.json({ 
      success: false, 
      error: 'Erro interno do servidor' 
    }, { status: 500 })
  }
}
