import { NextRequest, NextResponse } from 'next/server'
import { authService } from '@/lib/auth-custom'

export async function POST(request: NextRequest) {
  try {
    const { email } = await request.json()

    console.log('üîê [API] Solicita√ß√£o de redefini√ß√£o de senha para:', email)

    if (!email) {
      return NextResponse.json({ success: false, error: 'Email √© obrigat√≥rio' }, { status: 400 })
    }

    // Validar formato do email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return NextResponse.json({ success: false, error: 'Formato de email inv√°lido' }, { status: 400 })
    }

    // Usar o AuthService para solicitar redefini√ß√£o
    const result = await authService.requestPasswordReset(email)

    if (!result.success) {
      console.log('‚ùå [API] Erro ao solicitar redefini√ß√£o:', result.error)
      return NextResponse.json({ success: false, error: result.error }, { status: 500 })
    }

    console.log('‚úÖ [API] Solicita√ß√£o de redefini√ß√£o processada com sucesso')

    // Por seguran√ßa, sempre retornar sucesso, mesmo se o email n√£o existir
    return NextResponse.json({
      success: true,
      message: 'Se o email estiver cadastrado, voc√™ receber√° instru√ß√µes para redefinir sua senha.'
    })

  } catch (error) {
    console.error('‚ùå [API] Erro inesperado na solicita√ß√£o de redefini√ß√£o:', error)
    return NextResponse.json({ success: false, error: 'Erro interno do servidor' }, { status: 500 })
  }
}
