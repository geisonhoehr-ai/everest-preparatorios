-- ===================================================================
-- CORRE√á√ÉO DAS POL√çTICAS DE GAMIFICA√á√ÉO - EVEREST PREPARAT√ìRIOS
-- Este script corrige as pol√≠ticas duplicadas e cria apenas as que faltam
-- ===================================================================

-- ===================================================================
-- REMOVER POL√çTICAS EXISTENTES (se houver)
-- ===================================================================

-- Remove pol√≠ticas existentes para evitar conflitos
DROP POLICY IF EXISTS "Users can view own gamification stats" ON user_gamification_stats;
DROP POLICY IF EXISTS "Users can update own gamification stats" ON user_gamification_stats;
DROP POLICY IF EXISTS "Users can insert own gamification stats" ON user_gamification_stats;

DROP POLICY IF EXISTS "Users can view own activity log" ON user_activity_log;
DROP POLICY IF EXISTS "Users can insert own activity log" ON user_activity_log;

DROP POLICY IF EXISTS "Anyone can view available achievements" ON available_achievements;

DROP POLICY IF EXISTS "Users can view own achievement progress" ON user_achievement_progress;
DROP POLICY IF EXISTS "Users can update own achievement progress" ON user_achievement_progress;
DROP POLICY IF EXISTS "Users can insert own achievement progress" ON user_achievement_progress;

DROP POLICY IF EXISTS "Anyone can view rankings" ON user_rankings;
DROP POLICY IF EXISTS "Users can insert own rankings" ON user_rankings;

DROP POLICY IF EXISTS "Users can view own daily stats" ON user_daily_stats;
DROP POLICY IF EXISTS "Users can insert own daily stats" ON user_daily_stats;

-- ===================================================================
-- CRIAR POL√çTICAS CORRIGIDAS
-- ===================================================================

-- Pol√≠ticas para user_gamification_stats
CREATE POLICY "Users can view own gamification stats" ON user_gamification_stats
  FOR SELECT USING (auth.uid() = user_uuid);

CREATE POLICY "Users can update own gamification stats" ON user_gamification_stats
  FOR UPDATE USING (auth.uid() = user_uuid);

CREATE POLICY "Users can insert own gamification stats" ON user_gamification_stats
  FOR INSERT WITH CHECK (auth.uid() = user_uuid);

-- Pol√≠ticas para user_activity_log
CREATE POLICY "Users can view own activity log" ON user_activity_log
  FOR SELECT USING (auth.uid() = user_uuid);

CREATE POLICY "Users can insert own activity log" ON user_activity_log
  FOR INSERT WITH CHECK (auth.uid() = user_uuid);

-- Pol√≠ticas para available_achievements (leitura p√∫blica)
CREATE POLICY "Anyone can view available achievements" ON available_achievements
  FOR SELECT USING (true);

-- Pol√≠ticas para user_achievement_progress
CREATE POLICY "Users can view own achievement progress" ON user_achievement_progress
  FOR SELECT USING (auth.uid() = user_uuid);

CREATE POLICY "Users can update own achievement progress" ON user_achievement_progress
  FOR UPDATE USING (auth.uid() = user_uuid);

CREATE POLICY "Users can insert own achievement progress" ON user_achievement_progress
  FOR INSERT WITH CHECK (auth.uid() = user_uuid);

-- Pol√≠ticas para user_rankings (leitura p√∫blica para ranking)
CREATE POLICY "Anyone can view rankings" ON user_rankings
  FOR SELECT USING (true);

CREATE POLICY "Users can insert own rankings" ON user_rankings
  FOR INSERT WITH CHECK (auth.uid() = user_uuid);

-- Pol√≠ticas para user_daily_stats
CREATE POLICY "Users can view own daily stats" ON user_daily_stats
  FOR SELECT USING (auth.uid() = user_uuid);

CREATE POLICY "Users can insert own daily stats" ON user_daily_stats
  FOR INSERT WITH CHECK (auth.uid() = user_uuid);

-- ===================================================================
-- VERIFICAR SE AS TABELAS EXISTEM ANTES DE INSERIR CONQUISTAS
-- ===================================================================

-- Insere conquistas apenas se a tabela existir e estiver vazia
DO $$
BEGIN
  -- Verifica se a tabela available_achievements existe
  IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'available_achievements') THEN
    -- Verifica se j√° tem conquistas
    IF NOT EXISTS (SELECT 1 FROM available_achievements LIMIT 1) THEN
      -- Insere conquistas padr√£o
      INSERT INTO available_achievements (achievement_key, title, description, icon, category, xp_reward, score_reward, requirements) VALUES
      -- Conquistas de Estudo
      ('first_flashcard', 'Primeira Vit√≥ria', 'Complete seu primeiro flashcard', 'üßø', 'study', 50, 100, '{"type": "flashcard", "count": 1}'),
      ('flashcard_master', 'Mestre dos Cards', 'Complete 100 flashcards', 'üìö', 'study', 200, 500, '{"type": "flashcard", "count": 100}'),
      ('first_quiz', 'Primeiro Quiz', 'Complete seu primeiro quiz', 'üéØ', 'study', 50, 100, '{"type": "quiz", "count": 1}'),
      ('quiz_champion', 'Campe√£o dos Quizzes', 'Complete 20 quizzes', 'üèÜ', 'study', 300, 1000, '{"type": "quiz", "count": 20}'),
      ('first_lesson', 'Primeira Li√ß√£o', 'Assista sua primeira li√ß√£o', 'üìñ', 'study', 50, 100, '{"type": "lesson", "count": 1}'),

      -- Conquistas de Streak
      ('streak_3_days', 'Consistente', 'Estude por 3 dias consecutivos', 'üî•', 'streak', 100, 200, '{"type": "streak", "days": 3}'),
      ('streak_7_days', 'Maratonista', 'Estude por 7 dias consecutivos', 'üèÉ', 'streak', 200, 500, '{"type": "streak", "days": 7}'),
      ('streak_30_days', 'Lenda', 'Estude por 30 dias consecutivos', 'üëë', 'streak', 500, 2000, '{"type": "streak", "days": 30}'),

      -- Conquistas de Dom√≠nio
      ('topic_master', 'Mestre do T√≥pico', 'Complete 50 flashcards de um t√≥pico', 'üéì', 'mastery', 150, 400, '{"type": "topic_mastery", "flashcards": 50}'),
      ('perfect_quiz', 'Perfei√ß√£o', 'Acerte 100% em um quiz', 'üíØ', 'mastery', 100, 300, '{"type": "perfect_score", "percentage": 100}'),

      -- Conquistas de N√≠vel
      ('level_5', 'Aprendiz', 'Alcance o n√≠vel 5', '‚≠ê', 'level', 100, 300, '{"type": "level", "target": 5}'),
      ('level_10', 'Estudante', 'Alcance o n√≠vel 10', '‚≠ê‚≠ê', 'level', 200, 600, '{"type": "level", "target": 10}'),
      ('level_20', 'Mestre', 'Alcance o n√≠vel 20', '‚≠ê‚≠ê‚≠ê', 'level', 500, 1500, '{"type": "level", "target": 20}'),

      -- Conquistas de Liga
      ('league_aprendizes', 'Aprendiz da Guilda', 'Complete a Liga dos Aprendizes', 'ü™Ñ', 'league', 300, 1000, '{"type": "league", "name": "Aprendizes"}'),
      ('league_aventureiros', 'Aventureiro', 'Complete a Liga dos Aventureiros', 'üó°Ô∏è', 'league', 500, 2000, '{"type": "league", "name": "Aventureiros"}'),
      ('league_herois', 'Her√≥i', 'Complete a Liga dos Her√≥is', 'üõ°Ô∏è', 'league', 800, 3500, '{"type": "league", "name": "Her√≥is"}'),
      ('league_mestres', 'Mestre', 'Complete a Liga dos Mestres', 'üî•', 'league', 1200, 5000, '{"type": "league", "name": "Mestres"}'),
      ('league_lendas', 'Lenda', 'Complete a Liga das Lendas', 'üåå', 'league', 2000, 10000, '{"type": "league", "name": "Lendas"}');
      
      RAISE NOTICE '‚úÖ 20 conquistas padr√£o inseridas com sucesso!';
    ELSE
      RAISE NOTICE '‚ÑπÔ∏è Tabela de conquistas j√° possui dados. Pulando inser√ß√£o.';
    END IF;
  ELSE
    RAISE NOTICE '‚ö†Ô∏è Tabela available_achievements n√£o existe. Execute o script principal primeiro.';
  END IF;
END $$;

-- ===================================================================
-- VERIFICAR STATUS DAS TABELAS
-- ===================================================================

SELECT 
  '=== VERIFICA√á√ÉO DAS TABELAS DE GAMIFICA√á√ÉO ===' as secao,
  'Tabelas criadas' as status;

-- Verifica se as tabelas existem
SELECT 
  table_name,
  CASE 
    WHEN table_name IS NOT NULL THEN '‚úÖ Existe'
    ELSE '‚ùå N√£o existe'
  END as status
FROM (
  SELECT 'user_gamification_stats' as table_name
  UNION ALL SELECT 'user_activity_log'
  UNION ALL SELECT 'available_achievements'
  UNION ALL SELECT 'user_achievement_progress'
  UNION ALL SELECT 'user_rankings'
  UNION ALL SELECT 'user_daily_stats'
) t
WHERE EXISTS (
  SELECT 1 FROM information_schema.tables 
  WHERE table_name = t.table_name
);

-- Verifica pol√≠ticas criadas
SELECT 
  '=== VERIFICA√á√ÉO DAS POL√çTICAS ===' as secao,
  'Pol√≠ticas configuradas' as status;

SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual,
  with_check
FROM pg_policies 
WHERE schemaname = 'public' 
  AND tablename IN (
    'user_gamification_stats',
    'user_activity_log', 
    'available_achievements',
    'user_achievement_progress',
    'user_rankings',
    'user_daily_stats'
  )
ORDER BY tablename, policyname;

-- ===================================================================
-- MENSAGEM DE SUCESSO
-- ===================================================================

SELECT 
  '‚úÖ POL√çTICAS DE GAMIFICA√á√ÉO CORRIGIDAS COM SUCESSO!' as status,
  'Execute este script se houver erros de pol√≠ticas duplicadas' as instrucao;

-- ===================================================================
-- PR√ìXIMOS PASSOS:
-- 1. Execute este script no SQL Editor do Supabase
-- 2. Verifique se n√£o h√° mais erros de pol√≠ticas
-- 3. Teste o sistema de gamifica√ß√£o
-- ===================================================================
