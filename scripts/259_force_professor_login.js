require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå [FORCE_LOGIN] Vari√°veis de ambiente n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function forceProfessorLogin() {
  console.log('üîß [FORCE_LOGIN] For√ßando login do professor...')
  
  try {
    // 1. Verificar se o usu√°rio existe
    console.log('üîç [FORCE_LOGIN] Verificando usu√°rio...')
    const { data: { users }, error: userError } = await supabase.auth.admin.listUsers()
    
    if (userError) {
      console.error('‚ùå [FORCE_LOGIN] Erro ao listar usu√°rios:', userError)
      return
    }
    
    const professorUser = users.find(u => u.email === 'professor@teste.com')
    
    if (!professorUser) {
      console.log('‚ö†Ô∏è [FORCE_LOGIN] Usu√°rio n√£o encontrado, criando...')
      
      const { data: newUser, error: createError } = await supabase.auth.admin.createUser({
        email: 'professor@teste.com',
        password: '123456',
        email_confirm: true
      })
      
      if (createError) {
        console.error('‚ùå [FORCE_LOGIN] Erro ao criar usu√°rio:', createError)
        return
      }
      
      console.log('‚úÖ [FORCE_LOGIN] Usu√°rio criado:', newUser.user.email)
    } else {
      console.log('‚úÖ [FORCE_LOGIN] Usu√°rio encontrado:', professorUser.email)
    }
    
    // 2. Garantir que o role est√° correto
    console.log('üîß [FORCE_LOGIN] Configurando role...')
    const { error: upsertError } = await supabase
      .from('user_roles')
      .upsert({
        user_uuid: 'professor@teste.com',
        role: 'teacher'
      }, {
        onConflict: 'user_uuid'
      })
    
    if (upsertError) {
      console.error('‚ùå [FORCE_LOGIN] Erro ao configurar role:', upsertError)
      return
    }
    
    console.log('‚úÖ [FORCE_LOGIN] Role configurado como teacher')
    
    // 3. Garantir que est√° na tabela members
    console.log('üë§ [FORCE_LOGIN] Configurando membro...')
    const { error: memberError } = await supabase
      .from('members')
      .upsert({
        email: 'professor@teste.com',
        full_name: 'Professor Teste',
        phone: '11999999999',
        status: 'active'
      }, {
        onConflict: 'email'
      })
    
    if (memberError) {
      console.error('‚ùå [FORCE_LOGIN] Erro ao configurar membro:', memberError)
      return
    }
    
    console.log('‚úÖ [FORCE_LOGIN] Membro configurado')
    
    // 4. Garantir que est√° na tabela student_profiles
    console.log('üìö [FORCE_LOGIN] Configurando perfil...')
    const { error: profileError } = await supabase
      .from('student_profiles')
      .upsert({
        user_uuid: 'professor@teste.com',
        nome_completo: 'Professor Teste'
      }, {
        onConflict: 'user_uuid'
      })
    
    if (profileError) {
      console.error('‚ùå [FORCE_LOGIN] Erro ao configurar perfil:', profileError)
      return
    }
    
    console.log('‚úÖ [FORCE_LOGIN] Perfil configurado')
    
    // 5. Testar login
    console.log('üîê [FORCE_LOGIN] Testando login...')
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'professor@teste.com',
      password: '123456'
    })
    
    if (authError) {
      console.error('‚ùå [FORCE_LOGIN] Erro no login:', authError)
      return
    }
    
    console.log('‚úÖ [FORCE_LOGIN] Login bem-sucedido!')
    console.log('üë§ [FORCE_LOGIN] Usu√°rio:', authData.user.email)
    console.log('üÜî [FORCE_LOGIN] ID:', authData.user.id)
    
    // 6. Verificar sess√£o
    const { data: { session } } = await supabase.auth.getSession()
    console.log('üîë [FORCE_LOGIN] Sess√£o ativa:', !!session)
    
    // 7. Verificar role com sess√£o
    const { data: roleData, error: roleError } = await supabase
      .from('user_roles')
      .select('role')
      .eq('user_uuid', 'professor@teste.com')
      .single()
    
    if (roleError) {
      console.error('‚ùå [FORCE_LOGIN] Erro ao verificar role:', roleError)
    } else {
      console.log('‚úÖ [FORCE_LOGIN] Role confirmado:', roleData.role)
    }
    
    console.log('üéâ [FORCE_LOGIN] Configura√ß√£o conclu√≠da!')
    console.log('üìã [FORCE_LOGIN] Dados para teste:')
    console.log('   - Email: professor@teste.com')
    console.log('   - Senha: 123456')
    console.log('   - Role: teacher')
    console.log('   - Menu: Deve mostrar op√ß√µes de admin')
    console.log('')
    console.log('üåê [FORCE_LOGIN] Agora acesse: http://localhost:3001')
    console.log('üîê [FORCE_LOGIN] Fa√ßa login com os dados acima')
    console.log('üë®‚Äçüè´ [FORCE_LOGIN] O menu deve mostrar op√ß√µes de professor/admin')
    
  } catch (error) {
    console.error('‚ùå [FORCE_LOGIN] Erro geral:', error)
  }
}

forceProfessorLogin() 