require('dotenv').config({ path: '.env.local' })

const { createClient } = require('@supabase/supabase-js')

// Configura√ß√£o do Supabase com chave de servi√ßo
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas!')
  console.error('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl)
  console.error('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey)
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function fixRLSRecursion() {
  try {
    console.log('üîß [FIX] Iniciando corre√ß√£o das pol√≠ticas RLS...')
    
    // Passo 1: Desabilitar RLS
    console.log('üîß [FIX] Desabilitando RLS...')
    const { error: disableError } = await supabase
      .rpc('exec_sql', { 
        sql: 'ALTER TABLE public.user_roles DISABLE ROW LEVEL SECURITY;' 
      })
    
    if (disableError) {
      console.error('‚ùå [FIX] Erro ao desabilitar RLS:', disableError)
    } else {
      console.log('‚úÖ [FIX] RLS desabilitado')
    }
    
    // Passo 2: Remover pol√≠ticas existentes
    console.log('üîß [FIX] Removendo pol√≠ticas existentes...')
    const policies = [
      'Users can view own role',
      'Admins can manage all roles',
      'Allow authenticated users to read user_roles',
      'Allow users to insert their own role',
      'Allow users to update their own role',
      'Allow users to delete their own role',
      'Enable insert for all users',
      'Enable select for all users',
      'Enable update for all users',
      'Enable delete for all users'
    ]
    
    for (const policy of policies) {
      const { error: dropError } = await supabase
        .rpc('exec_sql', { 
          sql: `DROP POLICY IF EXISTS "${policy}" ON public.user_roles;` 
        })
      
      if (dropError) {
        console.error(`‚ùå [FIX] Erro ao remover pol√≠tica "${policy}":`, dropError)
      } else {
        console.log(`‚úÖ [FIX] Pol√≠tica "${policy}" removida`)
      }
    }
    
    // Passo 3: Reabilitar RLS
    console.log('üîß [FIX] Reabilitando RLS...')
    const { error: enableError } = await supabase
      .rpc('exec_sql', { 
        sql: 'ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;' 
      })
    
    if (enableError) {
      console.error('‚ùå [FIX] Erro ao reabilitar RLS:', enableError)
    } else {
      console.log('‚úÖ [FIX] RLS reabilitado')
    }
    
    // Passo 4: Criar pol√≠ticas simples
    console.log('üîß [FIX] Criando pol√≠ticas simples...')
    
    const createPolicySQL = `
      CREATE POLICY "Allow read for authenticated users" ON public.user_roles
      FOR SELECT USING (auth.role() = 'authenticated');
    `
    
    const { error: createError } = await supabase
      .rpc('exec_sql', { sql: createPolicySQL })
    
    if (createError) {
      console.error('‚ùå [FIX] Erro ao criar pol√≠tica:', createError)
    } else {
      console.log('‚úÖ [FIX] Pol√≠tica criada')
    }
    
    // Passo 5: Testar acesso
    console.log('üîß [FIX] Testando acesso...')
    const { data: testData, error: testError } = await supabase
      .from('user_roles')
      .select('*')
      .limit(1)
    
    if (testError) {
      console.error('‚ùå [FIX] Erro no teste de acesso:', testError)
    } else {
      console.log('‚úÖ [FIX] Acesso funcionando!')
      console.log('üìä [FIX] Dados de teste:', testData)
    }
    
    console.log('üéâ [FIX] Corre√ß√£o conclu√≠da!')
    
  } catch (error) {
    console.error('‚ùå [FIX] Erro inesperado:', error)
  }
}

// Executar a corre√ß√£o
fixRLSRecursion()
