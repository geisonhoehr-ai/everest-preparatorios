require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

async function fixSupabaseAuth() {
  console.log('üîß [FIX] Iniciando diagn√≥stico e corre√ß√£o do problema de autentica√ß√£o...');
  
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );

  try {
    // Verificar se o problema √© espec√≠fico da cria√ß√£o de usu√°rios
    console.log('üîç [FIX] Verificando se o problema √© espec√≠fico da cria√ß√£o...');
    
    // Tentar criar um usu√°rio com configura√ß√£o m√≠nima
    const { data, error } = await supabase.auth.signUp({
      email: 'teste-fix@everest.com',
      password: '123456'
    });

    if (error) {
      console.error('‚ùå [FIX] Erro persistente:', error.message);
      console.error('‚ùå [FIX] C√≥digo:', error.code);
      console.error('‚ùå [FIX] Status:', error.status);
      
      // Verificar se √© um problema de configura√ß√£o espec√≠fica
      if (error.message.includes('Database error')) {
        console.log('üîç [FIX] Problema identificado: Erro no banco de dados');
        console.log('üí° [FIX] Poss√≠veis solu√ß√µes:');
        console.log('   1. Verificar configura√ß√£o de email no Supabase Dashboard');
        console.log('   2. Verificar pol√≠ticas de seguran√ßa (RLS)');
        console.log('   3. Verificar triggers ou fun√ß√µes personalizadas');
        console.log('   4. Verificar configura√ß√£o de autentica√ß√£o');
        
        // Tentar verificar se h√° problemas com a configura√ß√£o de email
        console.log('üîß [FIX] Verificando configura√ß√£o de email...');
        
        // Tentar criar usu√°rio com configura√ß√£o diferente
        const { data: data2, error: error2 } = await supabase.auth.signUp({
          email: 'teste-fix2@everest.com',
          password: '123456',
          options: {
            emailRedirectTo: `${process.env.NEXT_PUBLIC_SUPABASE_URL}/auth/callback`
          }
        });

        if (error2) {
          console.error('‚ùå [FIX] Erro persiste mesmo com configura√ß√£o diferente:', error2.message);
        } else {
          console.log('‚úÖ [FIX] Usu√°rio criado com configura√ß√£o alternativa!');
        }
      }
    } else {
      console.log('‚úÖ [FIX] Usu√°rio criado com sucesso!');
      console.log('üë§ [FIX] Email:', data.user?.email);
    }

    // Verificar se h√° problemas com a tabela auth.users
    console.log('üîß [FIX] Verificando tabela auth.users...');
    
    // Tentar acessar informa√ß√µes sobre a configura√ß√£o de auth
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå [FIX] Erro ao acessar sess√£o:', sessionError.message);
    } else {
      console.log('‚úÖ [FIX] Sess√£o acess√≠vel');
    }

    // Verificar se h√° problemas com triggers ou fun√ß√µes
    console.log('üîß [FIX] Verificando se h√° problemas com triggers...');
    
    // Tentar inserir diretamente na tabela user_roles para ver se h√° problemas
    const { data: insertData, error: insertError } = await supabase
      .from('user_roles')
      .insert({
        user_uuid: 'teste-trigger@everest.com',
        role: 'student'
      })
      .select();

    if (insertError) {
      console.error('‚ùå [FIX] Erro ao inserir na user_roles:', insertError.message);
    } else {
      console.log('‚úÖ [FIX] Inser√ß√£o na user_roles funcionando');
      
      // Remover o registro de teste
      const { error: deleteError } = await supabase
        .from('user_roles')
        .delete()
        .eq('user_uuid', 'teste-trigger@everest.com');
      
      if (deleteError) {
        console.error('‚ö†Ô∏è [FIX] Erro ao remover teste:', deleteError.message);
      }
    }

    // Sugerir solu√ß√µes
    console.log('üí° [FIX] Sugest√µes para resolver o problema:');
    console.log('   1. Acesse o Supabase Dashboard');
    console.log('   2. V√° para Authentication > Settings');
    console.log('   3. Verifique se "Enable email confirmations" est√° desabilitado');
    console.log('   4. Verifique se "Enable sign ups" est√° habilitado');
    console.log('   5. Verifique se h√° triggers ou fun√ß√µes personalizadas causando problemas');
    console.log('   6. Verifique as pol√≠ticas de seguran√ßa (RLS) na tabela auth.users');

  } catch (error) {
    console.error('‚ùå [FIX] Erro inesperado:', error);
  }
}

fixSupabaseAuth(); 