-- =====================================================
-- SCRIPT PARA LIMPAR BANCO ATUAL - ESTRUTURA UUID
-- EVEREST PREPARAT√ìRIOS - LIMPEZA ESPEC√çFICA
-- =====================================================

-- ‚ö†Ô∏è ATEN√á√ÉO: Este script ir√° EXCLUIR todas as tabelas do banco atual!
-- ‚ö†Ô∏è Fa√ßa backup antes de executar!
-- ‚ö†Ô∏è Execute apenas se tiver certeza absoluta!

-- =====================================================
-- VERIFICA√á√ÉO INICIAL E CONFIRMA√á√ÉO
-- =====================================================

-- Verificar quantas tabelas existem
DO $$
DECLARE
    table_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO table_count
    FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_type = 'BASE TABLE';
    
    RAISE NOTICE 'üîç VERIFICA√á√ÉO INICIAL:';
    RAISE NOTICE '======================';
    RAISE NOTICE 'üìä Total de tabelas encontradas: %', table_count;
    
    IF table_count = 0 THEN
        RAISE NOTICE '‚úÖ Nenhuma tabela encontrada. Nada para excluir.';
        RETURN;
    END IF;
    
    RAISE NOTICE '‚ö†Ô∏è ATEN√á√ÉO: % tabelas ser√£o EXCLU√çDAS!', table_count;
    RAISE NOTICE '‚ö†Ô∏è Certifique-se de ter feito backup antes de continuar!';
END $$;

-- =====================================================
-- LISTAR TODAS AS TABELAS ANTES DA EXCLUS√ÉO
-- =====================================================

-- Mostrar todas as tabelas que ser√£o exclu√≠das
SELECT 
    'TABELAS QUE SER√ÉO EXCLU√çDAS' as secao,
    table_name as tabela,
    CASE 
        WHEN table_name LIKE '%_backup' THEN 'üíæ Backup'
        WHEN table_name LIKE '%_temp' THEN 'üóëÔ∏è Tempor√°ria'
        WHEN table_name LIKE '%_old' THEN 'üóëÔ∏è Antiga'
        ELSE 'üìã Principal'
    END as tipo,
    CASE 
        WHEN table_name IN ('users', 'teachers', 'students', 'classes', 'student_classes') THEN 'üë§ Autentica√ß√£o'
        WHEN table_name LIKE 'password_%' THEN 'üîê Seguran√ßa'
        WHEN table_name LIKE 'user_%' THEN 'üë§ Usu√°rio'
        ELSE 'üìä Dados'
    END as categoria
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_type = 'BASE TABLE'
ORDER BY 
    CASE 
        WHEN table_name IN ('users', 'teachers', 'students', 'classes', 'student_classes') THEN 1
        WHEN table_name LIKE 'password_%' THEN 2
        WHEN table_name LIKE 'user_%' THEN 3
        ELSE 4
    END,
    table_name;

-- =====================================================
-- EXCLUIR TABELAS ESPEC√çFICAS (ORDEM CORRETA)
-- =====================================================

-- 1. Excluir tabelas de relacionamento primeiro
DROP TABLE IF EXISTS "public"."student_classes" CASCADE;
RAISE NOTICE '‚úÖ Tabela student_classes exclu√≠da.';

-- 2. Excluir tabelas dependentes
DROP TABLE IF EXISTS "public"."password_reset_tokens" CASCADE;
RAISE NOTICE '‚úÖ Tabela password_reset_tokens exclu√≠da.';

DROP TABLE IF EXISTS "public"."user_sessions" CASCADE;
RAISE NOTICE '‚úÖ Tabela user_sessions exclu√≠da.';

-- 3. Excluir tabelas de perfis espec√≠ficos
DROP TABLE IF EXISTS "public"."teachers" CASCADE;
RAISE NOTICE '‚úÖ Tabela teachers exclu√≠da.';

DROP TABLE IF EXISTS "public"."students" CASCADE;
RAISE NOTICE '‚úÖ Tabela students exclu√≠da.';

-- 4. Excluir tabelas de classes
DROP TABLE IF EXISTS "public"."classes" CASCADE;
RAISE NOTICE '‚úÖ Tabela classes exclu√≠da.';

-- 5. Excluir tabela principal de usu√°rios por √∫ltimo
DROP TABLE IF EXISTS "public"."users" CASCADE;
RAISE NOTICE '‚úÖ Tabela users exclu√≠da.';

-- =====================================================
-- LIMPEZA ADICIONAL
-- =====================================================

-- Limpar sequ√™ncias √≥rf√£s
DO $$
DECLARE
    seq_record RECORD;
    drop_sql TEXT;
BEGIN
    RAISE NOTICE 'üßπ Limpando sequ√™ncias √≥rf√£s...';
    
    FOR seq_record IN 
        SELECT sequencename
        FROM pg_sequences 
        WHERE schemaname = 'public'
    LOOP
        BEGIN
            drop_sql := format('DROP SEQUENCE IF EXISTS %I CASCADE', seq_record.sequencename);
            EXECUTE drop_sql;
            RAISE NOTICE '‚úÖ Sequ√™ncia % exclu√≠da.', seq_record.sequencename;
        EXCEPTION WHEN OTHERS THEN
            RAISE NOTICE '‚ö†Ô∏è Erro ao excluir sequ√™ncia %: %', seq_record.sequencename, SQLERRM;
        END;
    END LOOP;
END $$;

-- Limpar fun√ß√µes personalizadas
DO $$
DECLARE
    func_record RECORD;
    drop_sql TEXT;
BEGIN
    RAISE NOTICE 'üßπ Limpando fun√ß√µes personalizadas...';
    
    FOR func_record IN 
        SELECT routine_name
        FROM information_schema.routines 
        WHERE routine_schema = 'public'
        AND routine_type = 'FUNCTION'
        AND routine_name NOT LIKE 'pg_%'
        AND routine_name NOT LIKE 'information_schema_%'
    LOOP
        BEGIN
            drop_sql := format('DROP FUNCTION IF EXISTS %I CASCADE', func_record.routine_name);
            EXECUTE drop_sql;
            RAISE NOTICE '‚úÖ Fun√ß√£o % exclu√≠da.', func_record.routine_name;
        EXCEPTION WHEN OTHERS THEN
            RAISE NOTICE '‚ö†Ô∏è Erro ao excluir fun√ß√£o %: %', func_record.routine_name, SQLERRM;
        END;
    END LOOP;
END $$;

-- Limpar tipos personalizados
DO $$
DECLARE
    type_record RECORD;
    drop_sql TEXT;
BEGIN
    RAISE NOTICE 'üßπ Limpando tipos personalizados...';
    
    FOR type_record IN 
        SELECT typname
        FROM pg_type 
        WHERE typnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')
        AND typtype = 'e' -- tipos enum
    LOOP
        BEGIN
            drop_sql := format('DROP TYPE IF EXISTS %I CASCADE', type_record.typname);
            EXECUTE drop_sql;
            RAISE NOTICE '‚úÖ Tipo % exclu√≠do.', type_record.typname;
        EXCEPTION WHEN OTHERS THEN
            RAISE NOTICE '‚ö†Ô∏è Erro ao excluir tipo %: %', type_record.typname, SQLERRM;
        END;
    END LOOP;
END $$;

-- =====================================================
-- VERIFICA√á√ÉO FINAL
-- =====================================================

-- Verificar se todas as tabelas foram exclu√≠das
DO $$
DECLARE
    remaining_tables INTEGER;
    remaining_sequences INTEGER;
    remaining_functions INTEGER;
    remaining_types INTEGER;
BEGIN
    RAISE NOTICE 'üîç VERIFICA√á√ÉO FINAL:';
    RAISE NOTICE '====================';
    
    -- Contar tabelas restantes
    SELECT COUNT(*) INTO remaining_tables
    FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_type = 'BASE TABLE';
    
    -- Contar sequ√™ncias restantes
    SELECT COUNT(*) INTO remaining_sequences
    FROM pg_sequences 
    WHERE schemaname = 'public';
    
    -- Contar fun√ß√µes restantes
    SELECT COUNT(*) INTO remaining_functions
    FROM information_schema.routines 
    WHERE routine_schema = 'public'
    AND routine_type = 'FUNCTION'
    AND routine_name NOT LIKE 'pg_%'
    AND routine_name NOT LIKE 'information_schema_%';
    
    -- Contar tipos restantes
    SELECT COUNT(*) INTO remaining_types
    FROM pg_type 
    WHERE typnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')
    AND typtype = 'e';
    
    RAISE NOTICE 'üìä RESULTADO:';
    RAISE NOTICE '   - Tabelas restantes: %', remaining_tables;
    RAISE NOTICE '   - Sequ√™ncias restantes: %', remaining_sequences;
    RAISE NOTICE '   - Fun√ß√µes restantes: %', remaining_functions;
    RAISE NOTICE '   - Tipos restantes: %', remaining_types;
    
    IF remaining_tables = 0 AND remaining_sequences = 0 AND remaining_functions = 0 AND remaining_types = 0 THEN
        RAISE NOTICE '‚úÖ LIMPEZA COMPLETA! Todas as tabelas foram exclu√≠das.';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Alguns objetos ainda existem. Verifique manualmente.';
    END IF;
END $$;

-- =====================================================
-- RELAT√ìRIO FINAL
-- =====================================================

-- Relat√≥rio final
SELECT 
    'RELAT√ìRIO FINAL DA LIMPEZA' as secao,
    CASE 
        WHEN (SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE') = 0 
        THEN '‚úÖ Sucesso Total'
        ELSE '‚ö†Ô∏è Parcial'
    END as status,
    (SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE')::text as tabelas_restantes,
    (SELECT COUNT(*) FROM pg_sequences WHERE schemaname = 'public')::text as sequencias_restantes,
    (SELECT COUNT(*) FROM information_schema.routines WHERE routine_schema = 'public' AND routine_type = 'FUNCTION' AND routine_name NOT LIKE 'pg_%' AND routine_name NOT LIKE 'information_schema_%')::text as funcoes_restantes,
    (SELECT COUNT(*) FROM pg_type WHERE typnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public') AND typtype = 'e')::text as tipos_restantes;

-- =====================================================
-- RESUMO FINAL
-- =====================================================

/*
‚úÖ LIMPEZA COMPLETA CONCLU√çDA!

üéØ O QUE FOI FEITO:

1. ‚úÖ VERIFICA√á√ÉO INICIAL:
   - Contou todas as tabelas existentes
   - Listou tabelas que seriam exclu√≠das
   - Alertou sobre a exclus√£o

2. ‚úÖ EXCLUS√ÉO ESPEC√çFICA:
   - Excluiu tabelas na ordem correta (depend√™ncias primeiro)
   - Tratou erros individualmente
   - Registrou status de cada exclus√£o

3. ‚úÖ LIMPEZA ADICIONAL:
   - Removeu sequ√™ncias √≥rf√£s
   - Excluiu fun√ß√µes personalizadas
   - Limpou tipos personalizados (enums)

4. ‚úÖ VERIFICA√á√ÉO FINAL:
   - Confirmou exclus√£o completa
   - Contou objetos restantes
   - Relat√≥rio detalhado

üîÑ PR√ìXIMOS PASSOS:

1. ‚úÖ Verificar se todas as tabelas foram exclu√≠das
2. ‚úÖ Confirmar que n√£o h√° objetos √≥rf√£os
3. ‚úÖ Fazer backup do banco limpo se necess√°rio
4. ‚úÖ Recriar estrutura necess√°ria
5. ‚úÖ Restaurar dados de backup se aplic√°vel

‚ö†Ô∏è IMPORTANTE:
- Todas as tabelas foram exclu√≠das com CASCADE
- Sequ√™ncias e fun√ß√µes personalizadas foram removidas
- O banco est√° completamente limpo
- Fa√ßa backup antes de recriar estrutura
- Restaure dados de backup se necess√°rio

üöÄ O banco est√° pronto para uma nova estrutura!
*/
