const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
)

async function testRPCFunction() {
  try {
    console.log('üß™ [TESTE RPC] Testando fun√ß√£o RPC...')
    
    // 1. Testar sem autentica√ß√£o (deve retornar 'student')
    console.log('üîç [TESTE] Testando sem autentica√ß√£o...')
    const { data: noAuthData, error: noAuthError } = await supabase.rpc('get_role_for_current_user')
    
    if (noAuthError) {
      console.log('‚ùå [TESTE] Erro sem autentica√ß√£o:', noAuthError.message)
    } else {
      console.log('‚úÖ [TESTE] Sem autentica√ß√£o retornou:', noAuthError)
    }
    
    // 2. Fazer login como professor
    console.log('üîç [TESTE] Fazendo login como professor...')
    const { data: { user }, error: userError } = await supabase.auth.signInWithPassword({
      email: 'professor@teste.com',
      password: '123456'
    })
    
    if (userError) {
      console.error('‚ùå [TESTE] Erro no login:', userError.message)
      return
    }
    
    console.log('‚úÖ [TESTE] Login realizado:', user.email)
    
    // 3. Testar RPC com autentica√ß√£o
    console.log('üîç [TESTE] Testando RPC com autentica√ß√£o...')
    const { data: authData, error: authError } = await supabase.rpc('get_role_for_current_user')
    
    if (authError) {
      console.log('‚ùå [TESTE] Erro na RPC autenticada:', authError.message)
    } else {
      console.log('‚úÖ [TESTE] RPC autenticada retornou:', authData)
    }
    
    // 4. Verificar se o role est√° correto
    if (authData === 'teacher') {
      console.log('üéâ [TESTE] SUCESSO! RPC retornou role correto: teacher')
    } else {
      console.log('‚ùå [TESTE] PROBLEMA! RPC retornou:', authData, 'esperado: teacher')
    }
    
  } catch (error) {
    console.error('‚ùå [TESTE] Erro geral:', error)
  }
}

testRPCFunction()
