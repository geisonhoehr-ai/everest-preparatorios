'use client';

import { createContext, useContext, useState, useEffect } from 'react';

interface AuthUser {
  id: string;
  email: string;
  role: 'student' | 'teacher' | 'admin';
}

interface AuthState {
  user: AuthUser | null;
  isLoading: boolean;
  isAuthenticated: boolean;
}

interface AuthContextType extends AuthState {
  signIn: (email: string, password: string) => Promise<{ success: boolean; error?: string; user?: AuthUser }>;
  signUp: (email: string, password: string) => Promise<{ success: boolean; error?: string }>;
  signOut: () => Promise<{ success: boolean; error?: string }>;
  refreshUser: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function PageAuthWrapper({ children }: { children: React.ReactNode }) {
  console.log('üîê [PAGE_AUTH_WRAPPER] Renderizando wrapper...');
  
  // Estado para controlar se o componente foi montado no cliente
  const [mounted, setMounted] = useState(false);
  
  // Estado inicial com carregamento
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    isLoading: true,
    isAuthenticated: false
  });

  console.log('üîê [PAGE_AUTH_WRAPPER] Estado inicial:', authState);

  // Efeito para marcar o componente como montado
  useEffect(() => {
    setMounted(true);
  }, []);

  // Efeito para verificar a sess√£o do usu√°rio
  useEffect(() => {
    if (!mounted) return; // S√≥ executar ap√≥s montar no cliente
    
    async function checkSession() {
      try {
        console.log('üîê [AUTH] Verificando sess√£o...');
        
        // Importa√ß√£o din√¢mica para evitar problemas de SSR
        const { createClient } = await import('@/lib/supabase/client');
        const supabase = createClient();
        
        // Verificar sess√£o
        const { data: { session }, error: sessionError } = await supabase.auth.getSession();
        
        if (sessionError) {
          console.error('‚ùå [AUTH] Erro ao verificar sess√£o:', sessionError);
          setAuthState({ user: null, isLoading: false, isAuthenticated: false });
          return;
        }
        
        if (!session) {
          console.log('üîê [AUTH] Nenhuma sess√£o encontrada');
          setAuthState({ user: null, isLoading: false, isAuthenticated: false });
          return;
        }
        
        console.log('‚úÖ [AUTH] Sess√£o encontrada:', session.user.email);
        
        // Verificar role do usu√°rio
        const { data: roleData, error: roleError } = await supabase
          .from('user_roles')
          .select('role')
          .eq('user_uuid', session.user.id)
          .single();
        
        if (roleError) {
          console.error('‚ùå [AUTH] Erro ao verificar role:', roleError);
          setAuthState({ user: null, isLoading: false, isAuthenticated: false });
          return;
        }
        
        // Criar objeto de usu√°rio com role
        const user: AuthUser = {
          id: session.user.id,
          email: session.user.email || '',
          role: roleData?.role as 'student' | 'teacher' | 'admin'
        };
        
        console.log('‚úÖ [AUTH] Usu√°rio autenticado com role:', user);
        setAuthState({ user, isLoading: false, isAuthenticated: true });
      } catch (error) {
        console.error('‚ùå [AUTH] Erro ao verificar sess√£o:', error);
        
        console.log('‚ùå [AUTH] Erro ao verificar sess√£o:', error);
        setAuthState({ user: null, isLoading: false, isAuthenticated: false });
      }
    }
    
    checkSession();
  }, [mounted]); // Adicionado mounted como depend√™ncia

  // Fun√ß√£o de login com Supabase
  const signIn = async (email: string, password: string) => {
    try {
      console.log('üîê [AUTH] Tentativa de login:', email);
      
      setAuthState(prev => ({ ...prev, isLoading: true }));
      
      // Importa√ß√£o din√¢mica para evitar problemas de SSR
      const { createClient } = await import('@/lib/supabase/client');
      const supabase = createClient();
      
      // Tentar login com Supabase
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      });
      
      if (error) {
        console.error('‚ùå [AUTH] Erro no login:', error);
        setAuthState({ user: null, isLoading: false, isAuthenticated: false });
        return { success: false, error: error.message };
      }
      
      if (!data.user) {
        console.error('‚ùå [AUTH] Login sem usu√°rio retornado');
        setAuthState({ user: null, isLoading: false, isAuthenticated: false });
        return { success: false, error: 'Usu√°rio n√£o encontrado' };
      }
      
      // Verificar role do usu√°rio
      const { data: roleData, error: roleError } = await supabase
        .from('user_roles')
        .select('role')
        .eq('user_uuid', data.user.id)
        .single();
      
      if (roleError) {
        console.error('‚ùå [AUTH] Erro ao verificar role:', roleError);
        setAuthState({ user: null, isLoading: false, isAuthenticated: false });
        return { success: false, error: 'Erro ao verificar permiss√µes do usu√°rio' };
      }
      
      // Criar objeto de usu√°rio com role
      const user: AuthUser = {
        id: data.user.id,
        email: data.user.email || '',
        role: roleData?.role as 'student' | 'teacher' | 'admin'
      };
      
      console.log('‚úÖ [AUTH] Login bem-sucedido:', user);
      setAuthState({ user, isLoading: false, isAuthenticated: true });
      return { success: true, user };
    } catch (error: any) {
      console.error('‚ùå [AUTH] Erro no login:', error);
      setAuthState({ user: null, isLoading: false, isAuthenticated: false });
      return { success: false, error: error.message };
    }
  };

  // Fun√ß√£o de cadastro com Supabase
  const signUp = async (email: string, password: string) => {
    try {
      console.log('üìù [AUTH] Tentativa de cadastro:', email);
      
      setAuthState(prev => ({ ...prev, isLoading: true }));
      
      // Importa√ß√£o din√¢mica para evitar problemas de SSR
      const { createClient } = await import('@/lib/supabase/client');
      const supabase = createClient();
      
      // Tentar cadastro com Supabase
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          emailRedirectTo: window.location.origin + '/login'
        }
      });
      
      if (error) {
        console.error('‚ùå [AUTH] Erro no cadastro:', error);
        setAuthState(prev => ({ ...prev, isLoading: false }));
        return { success: false, error: error.message };
      }
      
      console.log('‚úÖ [AUTH] Cadastro iniciado:', data);
      
      // N√£o autenticar automaticamente ap√≥s o cadastro
      // O usu√°rio precisa confirmar o email primeiro
      setAuthState(prev => ({ ...prev, isLoading: false }));
      
      return { 
        success: true, 
        message: 'Cadastro realizado! Verifique seu email para confirmar sua conta.' 
      };
    } catch (error: any) {
      console.error('‚ùå [AUTH] Erro no cadastro:', error);
      setAuthState(prev => ({ ...prev, isLoading: false }));
      return { success: false, error: error.message };
    }
  };

  // Fun√ß√£o de logout com Supabase
  const signOut = async () => {
    try {
      console.log('üö™ [AUTH] Iniciando logout...');
      
      setAuthState(prev => ({ ...prev, isLoading: true }));
      
      // Importa√ß√£o din√¢mica para evitar problemas de SSR
      const { createClient } = await import('@/lib/supabase/client');
      const supabase = createClient();
      
      // Logout no Supabase
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.error('‚ùå [AUTH] Erro no logout:', error);
        setAuthState(prev => ({ ...prev, isLoading: false }));
        return { success: false, error: error.message };
      }
      
      console.log('‚úÖ [AUTH] Logout bem-sucedido');
      
      // Atualizar estado
      setAuthState({ user: null, isLoading: false, isAuthenticated: false });
      
      // Redirecionar para a p√°gina inicial ap√≥s logout
      window.location.href = '/';
      
      return { success: true };
    } catch (error: any) {
      console.error('‚ùå [AUTH] Erro no logout:', error);
      setAuthState(prev => ({ ...prev, isLoading: false }));
      return { success: false, error: error.message };
    }
  };

  // Fun√ß√£o para atualizar usu√°rio
  const refreshUser = async () => {
    try {
      console.log('üîÑ [AUTH] Iniciando refresh do usu√°rio...');
      setAuthState(prev => ({ ...prev, isLoading: true }));
      
      // Importa√ß√£o din√¢mica para evitar problemas de SSR
      const { createClient } = await import('@/lib/supabase/client');
      const supabase = createClient();
      
      // Verificar sess√£o atual
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError) {
        console.error('‚ùå [AUTH] Erro ao verificar sess√£o:', sessionError);
        setAuthState({ user: null, isLoading: false, isAuthenticated: false });
        return;
      }
      
      if (!session) {
        console.log('üîê [AUTH] Nenhuma sess√£o encontrada no refresh');
        setAuthState({ user: null, isLoading: false, isAuthenticated: false });
        return;
      }
      
      // Verificar role do usu√°rio
      const { data: roleData, error: roleError } = await supabase
        .from('user_roles')
        .select('role')
        .eq('user_uuid', session.user.id)
        .single();
      
      if (roleError) {
        console.error('‚ùå [AUTH] Erro ao verificar role no refresh:', roleError);
        setAuthState({ user: null, isLoading: false, isAuthenticated: false });
        return;
      }
      
      // Criar objeto de usu√°rio com role
      const user: AuthUser = {
        id: session.user.id,
        email: session.user.email || '',
        role: roleData?.role as 'student' | 'teacher' | 'admin'
      };
      
      console.log('‚úÖ [AUTH] Refresh bem-sucedido:', user);
      setAuthState({ user, isLoading: false, isAuthenticated: true });
    } catch (error) {
      console.error('‚ùå [AUTH] Erro no refresh do usu√°rio:', error);
      setAuthState({ user: null, isLoading: false, isAuthenticated: false });
    }
  };

  const value: AuthContextType = {
    ...authState,
    signIn,
    signUp,
    signOut,
    refreshUser
  };

  console.log('üîê [PAGE_AUTH_WRAPPER] Valor do contexto:', value);

  return (
    <AuthContext.Provider value={value}>
      {mounted ? children : (
        <div className="flex items-center justify-center min-h-screen">
          <div className="text-center">
            <div className="w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-muted-foreground">Carregando...</p>
          </div>
        </div>
      )}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  console.log('üîê [USE_AUTH] Hook sendo chamado...');
  
  // Verificar se estamos no cliente
  if (typeof window === 'undefined') {
    console.log('üîê [USE_AUTH] Executando no servidor, retornando contexto vazio');
    return {
      user: null,
      isLoading: true,
      isAuthenticated: false,
      signIn: async () => ({ success: false, error: 'Executando no servidor' }),
      signUp: async () => ({ success: false, error: 'Executando no servidor' }),
      signOut: async () => ({ success: false, error: 'Executando no servidor' }),
      refreshUser: async () => {}
    };
  }
  
  const context = useContext(AuthContext);
  console.log('üîê [USE_AUTH] Contexto encontrado:', !!context);
  
  if (context === undefined) {
    console.error('‚ùå [USE_AUTH] Contexto n√£o encontrado!');
    throw new Error('useAuth deve ser usado dentro de um PageAuthWrapper');
  }
  
  console.log('üîê [USE_AUTH] Retornando contexto:', context);
  return context;
}
