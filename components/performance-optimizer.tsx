"use client"

import { useEffect, useRef } from 'react'
import { usePathname } from 'next/navigation'

interface PerformanceOptimizerProps {
  children: React.ReactNode
}

export function PerformanceOptimizer({ children }: PerformanceOptimizerProps) {
  const pathname = usePathname()
  const lastPathname = useRef<string>('')
  const navigationStartTime = useRef<number>(0)

  useEffect(() => {
    // Medir tempo de navega√ß√£o
    const currentTime = performance.now()
    if (lastPathname.current && lastPathname.current !== pathname) {
      const navigationTime = currentTime - navigationStartTime.current
      console.log(`üöÄ [PERFORMANCE] Navega√ß√£o para ${pathname} levou ${navigationTime.toFixed(2)}ms`)
      
      // Se a navega√ß√£o demorou mais de 1 segundo, logar como lenta
      if (navigationTime > 1000) {
        console.warn(`‚ö†Ô∏è [PERFORMANCE] Navega√ß√£o lenta detectada: ${navigationTime.toFixed(2)}ms`)
      }
    }
    
    lastPathname.current = pathname
    navigationStartTime.current = currentTime

    // Pr√©-carregar recursos cr√≠ticos
    preloadCriticalResources(pathname)
  }, [pathname])

  // Fun√ß√£o para pr√©-carregar recursos cr√≠ticos
  const preloadCriticalResources = (path: string) => {
    // Pr√©-carregar apenas recursos que realmente existem
    if (path.includes('/dashboard')) {
      // Remover pr√©-carregamento de CSS que n√£o existe
      console.log('üöÄ [PERFORMANCE] Pr√©-carregando recursos para dashboard')
    }
    
    // Pr√©-carregar imagens importantes apenas se existirem
    if (path.includes('/flashcards')) {
      // Verificar se o recurso existe antes de pr√©-carregar
      fetch('/flashcard-icons.svg', { method: 'HEAD' })
        .then(response => {
          if (response.ok) {
            preloadResource('/flashcard-icons.svg', 'image')
          }
        })
        .catch(() => {
          console.log('‚ÑπÔ∏è [PERFORMANCE] Recurso flashcard-icons.svg n√£o encontrado')
        })
    }
    
    // Pr√©-carregar dados de API apenas se existirem
    if (path.includes('/quiz')) {
      fetch('/api/quiz-data', { method: 'HEAD' })
        .then(response => {
          if (response.ok) {
            preloadResource('/api/quiz-data', 'fetch')
          }
        })
        .catch(() => {
          console.log('‚ÑπÔ∏è [PERFORMANCE] API quiz-data n√£o encontrada')
        })
    }
  }

  // Fun√ß√£o para pr√©-carregar recursos
  const preloadResource = (href: string, as: string) => {
    if (typeof window !== 'undefined') {
      const link = document.createElement('link')
      link.rel = 'preload'
      link.href = href
      link.as = as
      document.head.appendChild(link)
    }
  }

  // Otimiza√ß√µes de performance
  useEffect(() => {
    // Limpar cache de imagens antigas
    if ('caches' in window) {
      caches.keys().then(cacheNames => {
        cacheNames.forEach(cacheName => {
          if (cacheName.includes('image-cache')) {
            caches.delete(cacheName)
          }
        })
      })
    }

    // Otimizar scroll
    let scrollTimeout: NodeJS.Timeout
    const handleScroll = () => {
      clearTimeout(scrollTimeout)
      scrollTimeout = setTimeout(() => {
        // Pausar anima√ß√µes durante scroll
        document.body.style.setProperty('--scroll-paused', 'true')
      }, 100)
    }

    window.addEventListener('scroll', handleScroll, { passive: true })

    return () => {
      window.removeEventListener('scroll', handleScroll)
      clearTimeout(scrollTimeout)
    }
  }, [])

  // Otimiza√ß√µes de mem√≥ria
  useEffect(() => {
    const cleanup = () => {
      // Limpar event listeners desnecess√°rios
      const elements = document.querySelectorAll('[data-temp-listener]')
      elements.forEach(el => {
        el.removeAttribute('data-temp-listener')
      })

      // For√ßar garbage collection se dispon√≠vel
      if ('gc' in window) {
        // @ts-ignore
        window.gc()
      }
    }

    // Limpar a cada 5 minutos
    const interval = setInterval(cleanup, 5 * 60 * 1000)

    return () => {
      clearInterval(interval)
      cleanup()
    }
  }, [])

  return <>{children}</>
}

// Hook para otimizar re-renderiza√ß√µes
export function usePerformanceOptimizer() {
  const renderCount = useRef(0)
  
  useEffect(() => {
    renderCount.current++
    
    if (renderCount.current > 10) {
      console.warn('‚ö†Ô∏è [PERFORMANCE] Muitas re-renderiza√ß√µes detectadas')
    }
  })

  return {
    renderCount: renderCount.current
  }
}

// Hook para debounce de fun√ß√µes
export function useDebounce<T extends (...args: any[]) => any>(
  func: T,
  delay: number
): T {
  const timeoutRef = useRef<NodeJS.Timeout | null>(null)

  return ((...args: Parameters<T>) => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current)
    }
    
    timeoutRef.current = setTimeout(() => {
      func(...args)
    }, delay)
  }) as T
}

// Hook para throttle de fun√ß√µes
export function useThrottle<T extends (...args: any[]) => any>(
  func: T,
  delay: number
): T {
  const lastCall = useRef(0)
  const lastCallTimer = useRef<NodeJS.Timeout | null>(null)

  return ((...args: Parameters<T>) => {
    const now = Date.now()
    
    if (now - lastCall.current >= delay) {
      lastCall.current = now
      func(...args)
    } else {
      if (lastCallTimer.current) {
        clearTimeout(lastCallTimer.current)
      }
      
      lastCallTimer.current = setTimeout(() => {
        lastCall.current = Date.now()
        func(...args)
      }, delay - (now - lastCall.current))
    }
  }) as T
}
